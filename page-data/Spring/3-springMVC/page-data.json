{"componentChunkName":"component---src-templates-blog-post-js","path":"/Spring/3-springMVC/","result":{"data":{"site":{"siteMetadata":{"title":"Hyem.log","author":"[hyem]","siteUrl":"https://hyemin-jang.github.io","comment":{"disqusShortName":"","utterances":"hyemin-jang/hyemin-jang.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"dc4b5865-c157-5ea1-a5a2-0d556139305c","excerpt":"1) 구성 프론트 Controller 패턴 아키텍처 클라이언트가 보낸 요청을 받아서 공통적인 작업 먼저 수행 적절한 세부 컨트롤러로 위임 예외가 발생했을 경우 프론트컨트롤러가 일관된 방식으로 처리 프론트 컨트롤러는 스프링에서 지원해준다 = DispatcherServlet Spring Mvc Architecture Flow Online Shop, UP TO 66% OFF 실행 프로세스 DispatcherServlet이 HTTP 요청을 받음 D…","html":"<h2 id=\"1-구성\" style=\"position:relative;\"><a href=\"#1-%EA%B5%AC%EC%84%B1\" aria-label=\"1 구성 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) 구성</h2>\n<p>프론트 Controller 패턴 아키텍처</p>\n<ul>\n<li>클라이언트가 보낸 요청을 받아서 공통적인 작업 먼저 수행</li>\n<li>적절한 세부 컨트롤러로 위임</li>\n<li>예외가 발생했을 경우 프론트컨트롤러가 일관된 방식으로 처리</li>\n</ul>\n<p>프론트 컨트롤러는 스프링에서 지원해준다</p>\n<p>= DispatcherServlet</p>\n<p><img src=\"https://www.onlinetutorialspoint.com/wp-content/uploads/2015/04/Spring-Web-MVC-Framework-Flow.png\" alt=\"Spring Mvc Architecture Flow Online Shop, UP TO 66% OFF\"></p>\n<p>실행 프로세스</p>\n<ol>\n<li>\n<p>DispatcherServlet이 HTTP 요청을 받음</p>\n<ol>\n<li>D ~가 서브 컨트롤러로 요청 위임</li>\n</ol>\n</li>\n<li>컨트롤러의 모델 생성과 정보를 등록하고 클라이언트의 요청 결과 리턴</li>\n<li>DispatcherServlet의 모델로 뷰 생성</li>\n<li>ㄹㄹ</li>\n</ol>\n<p><code class=\"language-text\">Filter</code></p>\n<p><code class=\"language-text\">Interceptor</code></p>\n<h2 id=\"2-개발-구조\" style=\"position:relative;\"><a href=\"#2-%EA%B0%9C%EB%B0%9C-%EA%B5%AC%EC%A1%B0\" aria-label=\"2 개발 구조 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2) 개발 구조</h2>\n<p>메이븐 프로젝트로 변환 후 pom.xml에 dependency  추가</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>properties</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>java.version</span><span class=\"token punctuation\">></span></span>1.8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>java.version</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>project.build.sourceEncoding</span><span class=\"token punctuation\">></span></span>UTF-8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>project.build.sourceEncoding</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>project.reporting.outputEncoding</span><span class=\"token punctuation\">></span></span>UTF-8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>project.reporting.outputEncoding</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>spring-framework.version</span><span class=\"token punctuation\">></span></span>4.3.30.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>spring-framework.version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>properties</span><span class=\"token punctuation\">></span></span>\n\t\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!-- Spring MVC, 즉 Spring 기반의 웹 개발에 필요한 필수 library --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-webmvc<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>${spring-framework.version}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>cglib<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>cglib<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.2.2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n    \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.aspectj<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>aspectjweaver<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.7.3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n   \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.projectlombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>lombok<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.18.8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>&#x3C;web.xml> : front controller 등록시에는 정통 url매핑 방식 사용</p>\n<p>참고 - servlet 컨트롤러에서 <code class=\"language-text\">@WebServlet</code> 애노테이션과 같은 기능</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>web-app</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-name</span><span class=\"token punctuation\">></span></span>dispatcher<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-name</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-class</span><span class=\"token punctuation\">></span></span>org.springframework.web.servlet.DispatcherServlet<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-class</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>load-on-startup</span><span class=\"token punctuation\">></span></span>1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>load-on-startup</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-mapping</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-name</span><span class=\"token punctuation\">></span></span>dispatcher<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-name</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url-pattern</span><span class=\"token punctuation\">></span></span>/<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>url-pattern</span><span class=\"token punctuation\">></span></span>  <span class=\"token comment\">&lt;!-- 매핑할 url주소 --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-mapping</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>web-app</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><code class=\"language-text\">http://ip:port번호/project명/</code> 라는 url주소로 dispatcher라는 이름의 서블릿에 접근하게 된다.</p>\n<ul>\n<li><code class=\"language-text\">&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</code> : 메모리에 로딩시에 가장 먼저 생성하라는 우선순위를 부여하는 설정. 즉 클라이언트 접속 여부와 무관하게 front controller는 가정 먼저 생성해 놓으라는 의미.</li>\n</ul>\n<p><strong>WEB-INF 하단(web.xml과 같은 경로)</strong>에 Spring Bean Configuration 파일 생성</p>\n<p>파일명은 <code class=\"language-text\">dispatcher-servlet.xml</code> : <strong>dispatcher</strong>이라는 이름은 web.xml에서 설정한 서블릿 이름과 같아야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span>\n\t<span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span>\n\t<span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>aop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/aop<span class=\"token punctuation\">\"</span></span>\n\t<span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>context</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/context<span class=\"token punctuation\">\"</span></span>\n\t<span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>mvc</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/mvc<span class=\"token punctuation\">\"</span></span>\n\t<span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd\n\t\thttp://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd\n\t\thttp://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\n\t<span class=\"token comment\">&lt;!-- html파일이 dispatcher servlet을 거치지 않고도 직접 호출할 수 있게 하는 설정 --></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">mvc:</span>annotation-driven</span> <span class=\"token punctuation\">/></span></span>  \n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">mvc:</span>default-servlet-handler</span><span class=\"token punctuation\">/></span></span>\n\t\n\t<span class=\"token comment\">&lt;!-- 서브컨트롤러를 스프링 빈으로 등록 --></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">context:</span>component-scan</span> <span class=\"token attr-name\">base-package</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>subcontroller<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">context:</span>component-scan</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>&#x3C;index.html></p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"></code></pre></div>\n<p>&#x3C;HelloWorld.java>  : 서브 컨트롤러</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">subcontroller</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Controller</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestMapping</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ModelAndView</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 순수 자바 클래스를 스프링이 알아서 서블릿처럼 작동시킴</span>\n<span class=\"token annotation punctuation\">@Controller</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorld</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">,</span> method<span class=\"token operator\">=</span><span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 이 컨트롤러를 one이라는 url로 매핑하겠다</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">ModelAndView</span> <span class=\"token function\">m1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\">// ModelAndView : 데이터와 최종 뷰에 대한 정보를 갖는 객체</span>\n\t\t<span class=\"token class-name\">ModelAndView</span> mv <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ModelAndView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token comment\">// view.jsp 지정</span>\n\t\tmv<span class=\"token punctuation\">.</span><span class=\"token function\">setViewName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"view\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token comment\">//</span>\n\t\tmv<span class=\"token punctuation\">.</span><span class=\"token function\">addObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"playdata\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tmv<span class=\"token punctuation\">.</span><span class=\"token function\">addObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"msg\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"한글\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token keyword\">return</span> mv<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<ul>\n<li><code class=\"language-text\">@Controller</code> : spring 기반의 사용자 정의 http 처리 클래스</li>\n<li><code class=\"language-text\">@RequestMapping</code> : 클라이언트가 url상에 요청하는 이름/방식과 매핑하는 설정</li>\n</ul>\n</blockquote>\n<p>​\t  </p>\n<p>이제 View를 만들어볼 텐데, 기존에는 html, jsp 파일은 WebContent 폴더 하단에 만들었다. 그러나 스프링에서는 WebContent 하단의 <code class=\"language-text\">WEB-INF</code> 디렉토리에 jsp파일을 개발할 수 있게 됨으로써 <strong>보안이 강화</strong>될 수 있다.</p>\n<p>&#x3C;WEB-INF/views/view.jsp></p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">&lt;%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n<span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Insert title here<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n${name}, ${msg}\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>페이지 이동 방식</p>\n<ul>\n<li>\n<ol>\n<li><code class=\"language-text\">redirect</code> 방식 : </li>\n<li><code class=\"language-text\">return &quot;redirect:이동할url&quot;</code></li>\n<li>view는 WebContent 디렉토리 내에 개발해야 한다. <strong>WebContent/WEB-INF 내 개발 불가</strong></li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>forward 방식:</li>\n<li>prefix에 지정해준다면 inf내 가능</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h2 id=\"3-실습-예제\" style=\"position:relative;\"><a href=\"#3-%EC%8B%A4%EC%8A%B5-%EC%98%88%EC%A0%9C\" aria-label=\"3 실습 예제 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3) 실습 예제</h2>\n<h3 id=\"1-화면-이동하기\" style=\"position:relative;\"><a href=\"#1-%ED%99%94%EB%A9%B4-%EC%9D%B4%EB%8F%99%ED%95%98%EA%B8%B0\" aria-label=\"1 화면 이동하기 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(1) 화면 이동하기</h3>\n<h4>✅ redirect 방식으로 화면 이동</h4>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Controller</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Step01Controller</span> <span class=\"token punctuation\">{</span>\n\t\n\t<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"hello1\"</span><span class=\"token punctuation\">,</span> method <span class=\"token operator\">=</span> <span class=\"token class-name\">RequestMethod</span><span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// method 생략하면 디폴트는 GET방식임</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">m1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\t\t\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"redirect:page1.jsp\"</span><span class=\"token punctuation\">;</span>  \t\t\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>메소드 반환타입이 String이다. 리턴값은 <code class=\"language-text\">&quot;redirect:이동할url&quot;</code>이다.</p>\n<p>이동 후 url: </p>\n<h4>✅ forward 방식으로 화면 이동</h4>\n<h5>⚡ 1. 반환타입이 <code class=\"language-text\">ModelAndView</code>  - 무조건 forward방식</h5>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Controller</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Step01Controller</span> <span class=\"token punctuation\">{</span>\n\t\n    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"hello2\"</span><span class=\"token punctuation\">)</span> \n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">ModelAndView</span> <span class=\"token function\">m2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">ModelAndView</span> mv <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ModelAndView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tmv<span class=\"token punctuation\">.</span><span class=\"token function\">setViewName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"page2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t\tmv<span class=\"token punctuation\">.</span><span class=\"token function\">addObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"첫번째 데이터\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tmv<span class=\"token punctuation\">.</span><span class=\"token function\">addObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"두번째 데이터\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token keyword\">return</span> mv<span class=\"token punctuation\">;</span>  \t\t\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>메소드 반환타입이 <code class=\"language-text\">ModelAndView</code> 객체이다.</p>\n<blockquote>\n<p>ModelAndView 의 기능</p>\n<ul>\n<li>View 이름 지정 : <code class=\"language-text\">setViewName()</code></li>\n<li>데이터를 request 객체에 저장 : <code class=\"language-text\">addObject()</code></li>\n</ul>\n</blockquote>\n<p><code class=\"language-text\">dispatcher-servlet.xml</code> 파일에서 prefix와 sufffix를 설정한 대로, setViewName()을 통해 지정한 View 이름에 붙어서 jsp파일을 <code class=\"language-text\">WebContent/WEB-INF</code> 디렉토리 내 개발이 가능하다.   -  보안 강화</p>\n<p>이동 후 url:  </p>\n<p>​\t  </p>\n<p>&#x3C;WebContent/WEB-INF/views/page2.jsp></p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">&lt;%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n<span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Insert title here<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n${requestScope.data1} \n${requestScope.data2}\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>forward 방식은 화면 이동시에도 request/response 객체가 유지된다. 따라서 jsp파일에서 requestScope에서 데이터를 꺼내 사용할 수 있다.</p>\n<h5>⚡ 2-1. 반환타입이 <code class=\"language-text\">String</code> -</h5>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Controller</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Step01Controller</span> <span class=\"token punctuation\">{</span>\n\t\n    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"hello3\"</span><span class=\"token punctuation\">)</span> \n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">m3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"page3\"</span><span class=\"token punctuation\">;</span>\t\t\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>String 타입으로 반환시 return 문장에 redirect 표현 없이 view 이름만 리턴하면 기본으로 <strong>forward방식</strong>으로 이동한다.</p>\n<p>이동 후 url: </p>\n<h5>⚡ 2-2. 반환타입이 <code class=\"language-text\">String</code> -  거치지 않고</h5>\n<p>forward:/</p>\n<h3 id=\"2--데이터-전송하기\" style=\"position:relative;\"><a href=\"#2--%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EC%86%A1%ED%95%98%EA%B8%B0\" aria-label=\"2  데이터 전송하기 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(2)  데이터 전송하기</h3>\n<h4>✅ redirect 방식으로 이동시에 데이터 전송하기(파라미터 데이터 전송) : <code class=\"language-text\">RedirectAttributes</code></h4>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Controller</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Step01Controller</span> <span class=\"token punctuation\">{</span>\n\t\n    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token string\">\"hello4\"</span><span class=\"token punctuation\">)</span>  \n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">m4</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RedirectAttributes</span> attr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\t\t\n\t\tattr<span class=\"token punctuation\">.</span><span class=\"token function\">addAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"value입니다\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 쿼리스트링(파라미터 데이터) 담기</span>\n\t\t\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"redirect:page4.jsp\"</span><span class=\"token punctuation\">;</span>  \t\t\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>메소드 파라미터</strong>로 <code class=\"language-text\">RedirectAttributes</code>를 받는다.</p>\n<p><code class=\"language-text\">addAttribute()</code> 를 통해 파라미터로 전달할 데이터를 key, value 구조로 담는다.</p>\n<p>이동 후 url : </p>\n<p>&#x3C;WebContent/page4.jsp></p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">&lt;%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n<span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Insert title here<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n${param.key}\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>RedirectAttributes 객체에 담은 데이터를 jsp파일에서  <code class=\"language-text\">${param.키이름}</code> 를 통해 사용할 수 있다.</p>\n<hr>\n<h3 id=\"2-전송받은-데이터-jsp파일에서-사용하기\" style=\"position:relative;\"><a href=\"#2-%EC%A0%84%EC%86%A1%EB%B0%9B%EC%9D%80-%EB%8D%B0%EC%9D%B4%ED%84%B0-jsp%ED%8C%8C%EC%9D%BC%EC%97%90%EC%84%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"2 전송받은 데이터 jsp파일에서 사용하기 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(2) 전송받은 데이터 jsp파일에서 사용하기</h3>\n<p>아래 예제들은 index.html에서 보내는 요청이 <code class=\"language-text\">&lt;a href=&quot;hello5?id=bori&amp;age=10&quot;&gt;</code>와 같이 <strong>웹 쿼리스트링으로 사용자가 입력한 데이터가 포함된 경우</strong> 그 데이터를 어떻게 활용할 수 있는지에 대한 예제이다!!</p>\n<h4>✅ forward 방식으로 화면이동 후 쿼리스트링 및 request에 저장한 데이터 활용 - <code class=\"language-text\">ModelAndView</code> API 사용</h4>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Controller</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Step01Controller</span> <span class=\"token punctuation\">{</span>\n\t\n    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello5\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">ModelAndView</span> <span class=\"token function\">m5</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">ModelAndView</span> mv <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ModelAndView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t\t\n        mv<span class=\"token punctuation\">.</span><span class=\"token function\">setViewName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"page5\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \t\t\n\t\tmv<span class=\"token punctuation\">.</span><span class=\"token function\">addObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"newData\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"서버에서 reqeust에 새로 저장한 데이터입니다\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 서버에서 request에 새로 저장한 데이터 (=request.setAttribute())</span>\n\t\t\n        <span class=\"token keyword\">return</span> mv<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이동 후 url: </p>\n<p>​\t  </p>\n<p>&#x3C;WebContent/WEB-INF/views/page5.jsp></p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">&lt;%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n<span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Insert title here<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n파라미터로 받은 데이터: ${param.id}, ${param.age}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span>  \n서버에서 저장한 데이터: ${requestScope.newdata}\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><strong>forward</strong> 방식으로 이동했으므로 request 객체가 그대로 유지된다.</p>\n<p>➡ request의 파라미터, setAttribute로 저장된 데이터 모두 jsp 파일에서 활용 가능</p>\n<h4>✅ forward 방식으로 화면이동 후 쿼리스트링 및 request에 저장한 데이터 활용 - <code class=\"language-text\">Model</code> API 사용</h4>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Controller</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Step01Controller</span> <span class=\"token punctuation\">{</span>\n\t\n    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello6\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">m6</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Model</span> model<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\n\t\tmodel<span class=\"token punctuation\">.</span><span class=\"token function\">addAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"value입니다\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// request에 데이터 저장\t\t</span>\n\t\t\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"page6\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>메소드 파라미터</strong>로 <code class=\"language-text\">Model</code>을 받아 Model 인터페이스를 사용할 수 있다.</p>\n<p><code class=\"language-text\">addAttribute()</code>를 통해 클라이언트 View에 전송할 데이터를 key, value 형태로 Model에 담는다.</p>\n<p>&#x3C;WebContent/WEB-INF/views/page5.jsp></p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">&lt;%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n<span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Insert title here<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n쿼리스트링으로 넘어온 데이터 : ${param.id}-${param.age} <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span>\n서버에서 Model에 저장한 데이터 : ${requestScope.key} <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span>\n없는 데이터 : ${requestScope.id} <span class=\"token comment\">&lt;!-- 출력안됨. 데이터 없음 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><strong>forward</strong> 방식으로 이동했으므로 request 객체가 그대로 유지된다.</p>\n<p>➡ request의 파라미터, setAttribute로 저장된 데이터 모두 jsp 파일에서 활용 가능</p>\n<blockquote>\n<p>💡 <code class=\"language-text\">ModelAndView</code> vs <code class=\"language-text\">Model</code> 차이점</p>\n<ul>\n<li>Model 인터페이스 사용시에는 메소드 파라미터로 Model을 받아서 사용하고, View 이름을 String 타입으로 반환한다.</li>\n<li>ModelAndView 클래스 사용시에는 메소드 내부에서 ModelAndView 객체를 생성해 사용하며, <code class=\"language-text\">setViewName()</code> 메소드를 통해 뷰 이름을 지정한다.</li>\n</ul>\n</blockquote>\n<h4>✅ 클라이언트가 입력한 데이터로 DTO 객체를 생성해서 활용하는 경우 : <code class=\"language-text\">@ModelAttribute</code></h4>\n<p>아래와 같이 멤버변수로 <code class=\"language-text\">id</code>, <code class=\"language-text\">age</code>를 갖는 DTO 클래스가 있을 때,</p>\n<p>&#x3C;src/model.domain/Customer.java></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">model<span class=\"token punctuation\">.</span>domain</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AllArgsConstructor</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Getter</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">NoArgsConstructor</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Setter</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@NoArgsConstructor</span>\n<span class=\"token annotation punctuation\">@AllArgsConstructor</span>\n<span class=\"token annotation punctuation\">@Getter</span>\n<span class=\"token annotation punctuation\">@Setter</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Customer</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> id<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n\t\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>클라이언트 뷰에서 온 요청이  <code class=\"language-text\">&lt;a href=&quot;hello7?id=bori&amp;age=10&quot;&gt;</code>와 같이, <strong>쿼리스트링의 key들과 DTO클래스의 멤버변수명이 모두 일치할 경우, 메소드에 파라미터 선언만으로 DTO 객체 생성</strong>된다!</p>\n<p>DTO 파라미터 앞에 <code class=\"language-text\">@ModelAttribute</code> 애노테이션 붙이면 </p>\n<p>?????????????????????</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Controller</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Step01Controller</span> <span class=\"token punctuation\">{</span>\n\t\n    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello7\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">m7</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@ModelAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Customer</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token comment\">// = request.setAttribute(\"c\", new Customer(파라미터로 들어온 id, 파라미터로 들어온 age))\t\t</span>\n\t\t\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"page7\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n    \n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"3-예외-처리하기\" style=\"position:relative;\"><a href=\"#3-%EC%98%88%EC%99%B8-%EC%B2%98%EB%A6%AC%ED%95%98%EA%B8%B0\" aria-label=\"3 예외 처리하기 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(3) 예외 처리하기</h3>\n<p>질문</p>\n<p>forward는 무조건 web inf로 가나요?  - 아니구나! prefix에 붙여놔서 그렇구나 ^^</p>\n<p>handler가 트라이 캐치 대신인가요? 예외처리를 하면 printstacktrace는 어디서찍나요?</p>\n<p>model은 뭘까요???</p>","tableOfContents":"<ul>\n<li><a href=\"/Spring/3-springMVC/#1-%EA%B5%AC%EC%84%B1\">1) 구성</a></li>\n<li><a href=\"/Spring/3-springMVC/#2-%EA%B0%9C%EB%B0%9C-%EA%B5%AC%EC%A1%B0\">2) 개발 구조</a></li>\n<li>\n<p><a href=\"/Spring/3-springMVC/#3-%EC%8B%A4%EC%8A%B5-%EC%98%88%EC%A0%9C\">3) 실습 예제</a></p>\n<ul>\n<li>\n<p><a href=\"/Spring/3-springMVC/#1-%ED%99%94%EB%A9%B4-%EC%9D%B4%EB%8F%99%ED%95%98%EA%B8%B0\">(1) 화면 이동하기</a></p>\n<ul>\n<li><a href=\"/Spring/3-springMVC/#-redirect-%EB%B0%A9%EC%8B%9D%EC%9C%BC%EB%A1%9C-%ED%99%94%EB%A9%B4-%EC%9D%B4%EB%8F%99\">✅ redirect 방식으로 화면 이동</a></li>\n<li>\n<p><a href=\"/Spring/3-springMVC/#-forward-%EB%B0%A9%EC%8B%9D%EC%9C%BC%EB%A1%9C-%ED%99%94%EB%A9%B4-%EC%9D%B4%EB%8F%99\">✅ forward 방식으로 화면 이동</a></p>\n<ul>\n<li><a href=\"/Spring/3-springMVC/#-1-%EB%B0%98%ED%99%98%ED%83%80%EC%9E%85%EC%9D%B4-code-classlanguage-textmodelandviewcode----%EB%AC%B4%EC%A1%B0%EA%B1%B4-forward%EB%B0%A9%EC%8B%9D\">⚡ 1. 반환타입이 <code class=\"language-text\">ModelAndView</code>  - 무조건 forward방식</a></li>\n<li><a href=\"/Spring/3-springMVC/#-2-1-%EB%B0%98%ED%99%98%ED%83%80%EC%9E%85%EC%9D%B4-code-classlanguage-textstringcode--\">⚡ 2-1. 반환타입이 <code class=\"language-text\">String</code> -</a></li>\n<li><a href=\"/Spring/3-springMVC/#-2-2-%EB%B0%98%ED%99%98%ED%83%80%EC%9E%85%EC%9D%B4-code-classlanguage-textstringcode----%EA%B1%B0%EC%B9%98%EC%A7%80-%EC%95%8A%EA%B3%A0\">⚡ 2-2. 반환타입이 <code class=\"language-text\">String</code> -  거치지 않고</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/Spring/3-springMVC/#2--%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EC%86%A1%ED%95%98%EA%B8%B0\">(2)  데이터 전송하기</a></p>\n<ul>\n<li><a href=\"/Spring/3-springMVC/#-redirect-%EB%B0%A9%EC%8B%9D%EC%9C%BC%EB%A1%9C-%EC%9D%B4%EB%8F%99%EC%8B%9C%EC%97%90-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EC%86%A1%ED%95%98%EA%B8%B0%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%84%EC%86%A1--code-classlanguage-textredirectattributescode\">✅ redirect 방식으로 이동시에 데이터 전송하기(파라미터 데이터 전송) : <code class=\"language-text\">RedirectAttributes</code></a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/Spring/3-springMVC/#2-%EC%A0%84%EC%86%A1%EB%B0%9B%EC%9D%80-%EB%8D%B0%EC%9D%B4%ED%84%B0-jsp%ED%8C%8C%EC%9D%BC%EC%97%90%EC%84%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">(2) 전송받은 데이터 jsp파일에서 사용하기</a></p>\n<ul>\n<li><a href=\"/Spring/3-springMVC/#-forward-%EB%B0%A9%EC%8B%9D%EC%9C%BC%EB%A1%9C-%ED%99%94%EB%A9%B4%EC%9D%B4%EB%8F%99-%ED%9B%84-%EC%BF%BC%EB%A6%AC%EC%8A%A4%ED%8A%B8%EB%A7%81-%EB%B0%8F-request%EC%97%90-%EC%A0%80%EC%9E%A5%ED%95%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%99%9C%EC%9A%A9---code-classlanguage-textmodelandviewcode-api-%EC%82%AC%EC%9A%A9\">✅ forward 방식으로 화면이동 후 쿼리스트링 및 request에 저장한 데이터 활용 - <code class=\"language-text\">ModelAndView</code> API 사용</a></li>\n<li><a href=\"/Spring/3-springMVC/#-forward-%EB%B0%A9%EC%8B%9D%EC%9C%BC%EB%A1%9C-%ED%99%94%EB%A9%B4%EC%9D%B4%EB%8F%99-%ED%9B%84-%EC%BF%BC%EB%A6%AC%EC%8A%A4%ED%8A%B8%EB%A7%81-%EB%B0%8F-request%EC%97%90-%EC%A0%80%EC%9E%A5%ED%95%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%99%9C%EC%9A%A9---code-classlanguage-textmodelcode-api-%EC%82%AC%EC%9A%A9\">✅ forward 방식으로 화면이동 후 쿼리스트링 및 request에 저장한 데이터 활용 - <code class=\"language-text\">Model</code> API 사용</a></li>\n<li><a href=\"/Spring/3-springMVC/#-%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8%EA%B0%80-%EC%9E%85%EB%A0%A5%ED%95%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A1%9C-dto-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EC%83%9D%EC%84%B1%ED%95%B4%EC%84%9C-%ED%99%9C%EC%9A%A9%ED%95%98%EB%8A%94-%EA%B2%BD%EC%9A%B0--code-classlanguage-textmodelattributecode\">✅ 클라이언트가 입력한 데이터로 DTO 객체를 생성해서 활용하는 경우 : <code class=\"language-text\">@ModelAttribute</code></a></li>\n</ul>\n</li>\n<li><a href=\"/Spring/3-springMVC/#3-%EC%98%88%EC%99%B8-%EC%B2%98%EB%A6%AC%ED%95%98%EA%B8%B0\">(3) 예외 처리하기</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"[Spring] Spring MVC","date":"October 05, 2021"}}},"pageContext":{"slug":"/Spring/3-springMVC/","previous":{"fields":{"slug":"/Spring/2-aop/"},"frontmatter":{"title":"[Spring] AOP (관점 지향 프로그래밍)"}},"next":{"fields":{"slug":"/Python/[python]정규표현식-/"},"frontmatter":{"title":"[Python] 정규표현식"}}}}}