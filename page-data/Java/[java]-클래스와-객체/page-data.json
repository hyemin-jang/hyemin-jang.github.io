{"componentChunkName":"component---src-templates-blog-post-js","path":"/Java/[java]-클래스와-객체/","result":{"data":{"site":{"siteMetadata":{"title":"Hyem.log","author":"[hyem]","siteUrl":"https://hyemin-jang.github.io","comment":{"disqusShortName":"","utterances":"hyemin-jang/hyemin-jang.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"6c244566-4ffe-5a3c-9d03-cec61e02209c","excerpt":"1. 객체(Object) : 객체는 현실세계에 존재하는 모든 사물이 될 수 있다. 예) 아침에 일어나 버스를 타고 학교에 가는 과정을 프로그래밍한다고 가정 ‘학생’, ‘아침밥’, ‘버스’, ‘학교’ 등등의 객체 정의 객체 사이에 일어나는 일들을 구현 \n=  2. 클래스(Class) 객체의 속성과 기능을 코드로 구현한 것.\n‘객체를 만들어내기 위한 틀’ 이라고 생각하면 됨…","html":"<h1 id=\"1-객체object\" style=\"position:relative;\"><a href=\"#1-%EA%B0%9D%EC%B2%B4object\" aria-label=\"1 객체object permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 객체(Object)</h1>\n<p>: 객체는 현실세계에 존재하는 모든 사물이 될 수 있다.</p>\n<ul>\n<li>\n<p>예) 아침에 일어나 버스를 타고 학교에 가는 과정을 프로그래밍한다고 가정</p>\n<ul>\n<li>‘학생’, ‘아침밥’, ‘버스’, ‘학교’ 등등의 객체 정의</li>\n<li>객체 사이에 일어나는 일들을 구현\n= <code class=\"language-text\">객체지향 프로그래밍 (OOP, Object Oriented Programming)</code></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1 id=\"2-클래스class\" style=\"position:relative;\"><a href=\"#2-%ED%81%B4%EB%9E%98%EC%8A%A4class\" aria-label=\"2 클래스class permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 클래스(Class)</h1>\n<blockquote>\n<p>객체의 속성과 기능을 코드로 구현한 것.\n‘객체를 만들어내기 위한 틀’ 이라고 생각하면 됨</p>\n</blockquote>\n<h2 id=\"1-클래스-정의\" style=\"position:relative;\"><a href=\"#1-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%A0%95%EC%9D%98\" aria-label=\"1 클래스 정의 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) 클래스 정의</h2>\n<p>예) 자동차 클래스 만들기</p>\n<ul>\n<li>\n<p>🚗 자동차</p>\n<ul>\n<li>속성 : 이름, 제조사, 연식, 가격 등등<br>\n=> <strong><code class=\"language-text\">변수</code></strong>로 정의  </li>\n<li>\n<p>기능 : 출발하다, 멈추다 등등<br>\n=> <strong><code class=\"language-text\">메서드</code></strong>로 정의</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// 속성(필드) : 멤버 변수(member variable)</span>\n<span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> maker<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> year<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> price<span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<p>// 기능 : 메서드(method)\nvoid start() {\nSystem.out.println(“출발”);\n}\nvoid stop() {\nSystem.out.println(“멈춤”);\n}</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">### (1) 멤버변수  \n: 클래스 내부에 선언되어 객체의 속성을 나타내는 변수\n### (2) 메서드\n: 클래스 내부에서 멤버변수를 사용하여 클래스의 기능을 구현한 것\n\n- 메서드 정의하기 \n: `반환형` `메소드이름 (매개변수)` `{ }`\n\n- return값이 없는 메소드의 경우 반환형은 `void` 이다.\n\n### (3) 로컬변수\n: 메서드의 내부 `{}` / 메서드의 매개변수로 `()` / 생성자의 매개변수로 `()` 내부에 선언되는 변수\n - **메서드 또는 생성자를 호출하는 시점에 💎스택 메모리💎에 생성**, 메서드가 종료되면 메모리에서 삭제됨\n\n\n\n\n## 2) 클래스를 통한 객체 생성\n\n### (1) 인스턴스 (Instance)\n&gt; 실제로 사용할 수 있도록 생성된 클래스.\n&gt; 클래스를 이용해서 생성한 객체 = 인스턴스\n\n- 객체 생성 문법 :\n`자료형(클래스형)` `변수이름` = `new` `생성자`;\n-   객체가 생성된다 = 클래스를 실제 사용할 수 있도록 **메모리(💎힙 메모리💎) 공간을 할당**받는다.\n-   생성된 인스턴스를 가리키는 변수 = 참조변수\n\n\n\n```java\npublic class Student {  // 클래스 정의\n\t// 멤버변수\n\tint studentID;\n\tString studentName;\n\tint grade;\n\tString address;\n\t\n\t// 메서드\n\tpublic String getStudentName() {\n\t\treturn studentName;\n\t}\n\tpublic void setStudentName(String name) {\n\t\tstudentName = name;\n\t}\n    \n   \t// main함수 : Java Virtual Machine이 프로그램을 시작하기 위해 호출하는 함수.\n    \t// 클래스 내부에 만들긴 하지만 클래스의 메서드는 아님\n\tpublic static void main(String[] args) {\n\t\t\n        \t// 객체 생성\n        \tStudent student1 = new Student();\n\t\tStudent student2 = new Student();\n\t\t\n        \t// 클래스를 참조하는 참조변수를 통해 멤버변수와 메서드 호출\n\t\tstudent1.studentName = &quot;김철수&quot;;\n\t\tstudent2.studentName = &quot;홍길동&quot;;\t\t\n\t\tSystem.out.println(student1.getStudentName());  // 김철수 출력\n\t}\n\n}</code></pre></div>\n<h2 id=\"3-생성자-constructor\" style=\"position:relative;\"><a href=\"#3-%EC%83%9D%EC%84%B1%EC%9E%90-constructor\" aria-label=\"3 생성자 constructor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3) 생성자 (Constructor)</h2>\n<blockquote>\n<p>객체를 생성할 때 사용하는 일종의 함수.</p>\n</blockquote>\n<h3 id=\"1-기본-생성자-default-constructor\" style=\"position:relative;\"><a href=\"#1-%EA%B8%B0%EB%B3%B8-%EC%83%9D%EC%84%B1%EC%9E%90-default-constructor\" aria-label=\"1 기본 생성자 default constructor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(1) 기본 생성자 (default constructor)</h3>\n<ul>\n<li>생성자 이름은 클래스 이름과 같다.</li>\n<li>반환타입이 없다. (반환타입이 void인 것과 다르다)</li>\n<li>클래스를 정의할때 생성자를 명시적으로 만들지 않는다면, 컴파일 시에 자바가 알아서 기본 생성자를 만들어준다.</li>\n</ul>\n<h3 id=\"2-생성자-직접-구현\" style=\"position:relative;\"><a href=\"#2-%EC%83%9D%EC%84%B1%EC%9E%90-%EC%A7%81%EC%A0%91-%EA%B5%AC%ED%98%84\" aria-label=\"2 생성자 직접 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(2) 생성자 직접 구현</h3>\n<ul>\n<li>필요에 따라 직접 생성자 구현 가능\n⚡주로 멤버변수의 값들을 매개변수로 받아서 객체(인스턴스)가 생성될 때 멤버 변수 값을 초기화하는 역할⚡</li>\n<li>직접 생성자를 구현한 경우 기본생성자는 자동으로 만들어지지 않는다. (기본 생성자도 필요하면 명시적으로 구현해야 한다)</li>\n</ul>\n<h3 id=\"3-생성자-오버로드-constructor-overload\" style=\"position:relative;\"><a href=\"#3-%EC%83%9D%EC%84%B1%EC%9E%90-%EC%98%A4%EB%B2%84%EB%A1%9C%EB%93%9C-constructor-overload\" aria-label=\"3 생성자 오버로드 constructor overload permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(3) 생성자 오버로드 (constructor overload)</h3>\n<ul>\n<li>클래스에 생성자를 두 개 이상 제공</li>\n<li>필요에 따라 생성자를 선택해 사용</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// 멤버변수</span>\n\t<span class=\"token keyword\">int</span> studentID<span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">String</span> studentName<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> grade<span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">String</span> address<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\">// 기본 생성자</span>\n\t<span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\">// 직접 구현한 생성자 (멤버변수 studentID의 값을 초기화)</span>\n\t<span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tstudentID <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token comment\">// 메서드</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getStudentName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> studentName<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setStudentName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tstudentName <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t\n\t\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    \t\t<span class=\"token comment\">// 클래스 생성 - 기본생성자 사용</span>\n\t\t<span class=\"token class-name\">Student</span> student1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        \n       \t\t<span class=\"token comment\">// 클래스 생성 - 직접 구현한 생성자 사용</span>\n\t\t<span class=\"token class-name\">Student</span> student2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\n\t\t\t\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>student2<span class=\"token punctuation\">.</span>studentID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 123 호출</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>💡 생성자 오버로드를 이해하기 위한 개념\n<strong>메소드 오버로드 (method overload)</strong></p>\n<ul>\n<li>같은 클래스 안에 여러 메소드 존재</li>\n<li>메소드들의 이름은 다 같음 (반환 타입/접근제한자는 상관없음)</li>\n<li>메소드 매개변수의 갯수나 타입이 다름 (갯수와 타입이 둘다 같으면 안됨)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testMethod</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"int call\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testMethod</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> f<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"float call\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">float</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1.1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">testMethod</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"int call\"  </span>\n        <span class=\"token function\">testMethod</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"float call\"        </span>\n    <span class=\"token punctuation\">}</span> </code></pre></div>\n<ul>\n<li>매개변수에 따라 필요한 메소드를 골라서 사용 가능하다</li>\n</ul>\n<hr>\n<h1 id=\"3-참조-자료형\" style=\"position:relative;\"><a href=\"#3-%EC%B0%B8%EC%A1%B0-%EC%9E%90%EB%A3%8C%ED%98%95\" aria-label=\"3 참조 자료형 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 참조 자료형</h1>\n<ul>\n<li>\n<p>변수의 종류</p>\n<ul>\n<li>기본 자료형 <a href=\"https://velog.io/@hmjang28/Java-%EB%B3%80%EC%88%98%EC%99%80-%EC%9E%90%EB%A3%8C%ED%98%95\">(이전 포스팅 참고)</a></li>\n<li>참조 자료형\n: 클래스를 자료형으로 삼음 (해당 클래스를 참조하는 변수)</li>\n</ul>\n</li>\n</ul>\n<p>앞서 만든 학생 클래스에 ‘수강하는 과목’이라는 변수를 추가하고 싶다.\n과목들에 대한 속성을 각각 변수로 추가하면 비효율적이니, Subject라는 클래스를 만들어서 <code class=\"language-text\">Subject형 변수</code>를 선언해보자.</p>\n<p>&#x3C;Subject.java></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Subject 클래스 만들기</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Subject</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">String</span> subjectName<span class=\"token punctuation\">;</span>\n    \t<span class=\"token keyword\">int</span> subjectScore<span class=\"token punctuation\">;</span>        \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>&#x3C;Student.java></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">{</span>\n\t\n\t<span class=\"token keyword\">int</span> studentID<span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">String</span> studentName<span class=\"token punctuation\">;</span>\t\n\t<span class=\"token comment\">// Subject형 변수 선언</span>\n\t<span class=\"token class-name\">Subject</span> subject<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setSubject</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> score<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subject <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Subject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Subject 객체를 생성해야 사용할 수 있음</span>\n\t\tsubject<span class=\"token punctuation\">.</span>subjectName <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n\t\tsubject<span class=\"token punctuation\">.</span>subjectScore <span class=\"token operator\">=</span> score<span class=\"token punctuation\">;</span>\t\t\t\t\n\t<span class=\"token punctuation\">}</span>\n\t\n\t\n\t\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">Student</span> student1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        \n\t\tstudent1<span class=\"token punctuation\">.</span><span class=\"token function\">setSubject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"math\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>student1<span class=\"token punctuation\">.</span>subject<span class=\"token punctuation\">.</span>subjectName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// math 출력</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>\n<p>참조형 변수는 새로운 클래스를 만들어서 사용할 수도 있고, JDK에서 제공하는 클래스를 사용할 수도 있다.</p>\n<ul>\n<li>예) <code class=\"language-text\">String</code>은 java.lang 패키지 내에 있는 클래스이다.</li>\n</ul>\n</li>\n<li>기본형 변수는 메모리에 생성되면 실제 값(리터럴)을 저장한다.</li>\n<li>참조형 변수는 메모리에 생성되면 참조하는 클래스의 <strong>주소값</strong>을 저장한다.</li>\n</ul>\n<p><img src=\"https://images.velog.io/images/hmjang28/post/decfbce3-d647-4ffe-99e0-ea45c459757c/image.png\"></p>","frontmatter":{"title":"[Java] 2. 클래스와 객체","date":"August 19, 2021"}}},"pageContext":{"slug":"/Java/[java]-클래스와-객체/","previous":{"fields":{"slug":"/Java/[java]-변수와 자료형/"},"frontmatter":{"title":"[Java] 1. 변수와 자료형"}},"next":null}}}