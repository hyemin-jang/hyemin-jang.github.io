{"componentChunkName":"component---src-templates-blog-post-js","path":"/Java/13.ConnectionPool/","result":{"data":{"site":{"siteMetadata":{"title":"Hyem.log","author":"[hyem]","siteUrl":"https://hyemin-jang.github.io","comment":{"disqusShortName":"","utterances":"hyemin-jang/hyemin-jang.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"ce862953-c072-5d6f-b72b-6f9839dad510","excerpt":"Connection Pool을 사용하는 이유 자바 프로그램에서 DBMS로 커넥션을 생성하려면 시간이 많이 걸린다. 사용자가 접속할 때마다 커넥션을 생성하면 오버헤드가 발생할 수 있다. 그래서 웹 어플리케이션을 실행함과 동시에 커넥션 풀에 일정 개수의 DB 커넥션을 미리 만들어둔다. (Pool - 서버에 이미 내장된 메모리) 요청을 처리하는 각 스레드에서 커넥션을 생성하지 않고, 커넥션풀의 커넥션 객체를 할당받아 사용한 뒤 반납한다 img 이미지 출처 https://devbox.tistory.com…","html":"<h2 id=\"connection-pool을-사용하는-이유\" style=\"position:relative;\"><a href=\"#connection-pool%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0\" aria-label=\"connection pool을 사용하는 이유 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Connection Pool을 사용하는 이유</h2>\n<ul>\n<li>자바 프로그램에서 DBMS로 커넥션을 생성하려면 시간이 많이 걸린다.</li>\n<li>사용자가 접속할 때마다 커넥션을 생성하면 오버헤드가 발생할 수 있다.</li>\n<li>그래서 웹 어플리케이션을 실행함과 동시에 <strong>커넥션 풀에 일정 개수의 DB 커넥션을 미리 만들어둔다.</strong> (Pool - 서버에 이미 내장된 메모리)</li>\n<li>요청을 처리하는 각 스레드에서 커넥션을 생성하지 않고, 커넥션풀의 커넥션 객체를 할당받아 사용한 뒤 반납한다</li>\n</ul>\n<p><img src=\"https://t1.daumcdn.net/cfile/tistory/2629B3375492CD3E10\" alt=\"img\"></p>\n<p>[이미지 출처] <a href=\"https://devbox.tistory.com/entry/JSP-%EC%BB%A4%EB%84%A5%EC%85%98-%ED%92%80-1\">https://devbox.tistory.com/entry/JSP-%EC%BB%A4%EB%84%A5%EC%85%98-%ED%92%80-1</a></p>\n<h2 id=\"connection-pool-만들기\" style=\"position:relative;\"><a href=\"#connection-pool-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"connection pool 만들기 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Connection Pool 만들기</h2>\n<h3 id=\"1--datasource\" style=\"position:relative;\"><a href=\"#1--datasource\" aria-label=\"1  datasource permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(1)  DataSource</h3>\n<ul>\n<li>자바 웹 어플리케이션에서 커넥션풀 객체를 구현하기 위한 스펙을 정의해놓은 인터페이스 =  <code class=\"language-text\">javax.sql.DataSource</code></li>\n<li><strong>DataSource 객체에 DB연결에 필요한 URL, ID, Password, DriverClass를 미리 정의해놓고 사용</strong>한다 - DB연결시마다 해당 정보를 매번 입력해야 하는 번거로움 해소</li>\n</ul>\n<h3 id=\"2--jndi-java-naming-and-directory-interface\" style=\"position:relative;\"><a href=\"#2--jndi-java-naming-and-directory-interface\" aria-label=\"2  jndi java naming and directory interface permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(2)  JNDI (Java Naming and Directory Interface)</h3>\n<ul>\n<li>분산된 객체를 찾기위해 <strong>특정한 이름으로 객체를 등록해서 관리할 수 있게</strong> 해주는 자바 API</li>\n<li>Tomcat과 같은 WAS에서는 특정 폴더에 필요한 데이터 소스(라이브러리)가 있는데 그것을 사용하기 위해 JNDI 기술을 활용한다.</li>\n<li>미리 지정한 이름(<code class=\"language-text\">name</code>)을 찾아서(<code class=\"language-text\">lookup</code>) 활용하면 된다.</li>\n<li><code class=\"language-text\">Initialcontext</code>는 JNDI namespace의 모든 명명된 객체를 찾을 때 사용하는 객체</li>\n</ul>\n<h3 id=\"-tomcat에서-jndi-활용해서-db연결하기\" style=\"position:relative;\"><a href=\"#-tomcat%EC%97%90%EC%84%9C-jndi-%ED%99%9C%EC%9A%A9%ED%95%B4%EC%84%9C-db%EC%97%B0%EA%B2%B0%ED%95%98%EA%B8%B0\" aria-label=\" tomcat에서 jndi 활용해서 db연결하기 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💎 Tomcat에서 JNDI 활용해서 DB연결하기</h3>\n<ul>\n<li><code class=\"language-text\">context.xml</code> 파일에 커넥션풀을 만드는 DataSource 리소스를 등록한다.</li>\n<li>JNDI기술을 통해 해당 리소스의 이름을 가져와서 사용한다.</li>\n<li>DataSource는 사용자 요청이 있을 때마다 Connection을 제공한다.</li>\n</ul>\n<h2 id=\"웹-프로젝트에서-db-연동하기\" style=\"position:relative;\"><a href=\"#%EC%9B%B9-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%97%90%EC%84%9C-db-%EC%97%B0%EB%8F%99%ED%95%98%EA%B8%B0\" aria-label=\"웹 프로젝트에서 db 연동하기 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>웹 프로젝트에서 DB 연동하기</h2>\n<h3 id=\"1-jdbc-사용\" style=\"position:relative;\"><a href=\"#1-jdbc-%EC%82%AC%EC%9A%A9\" aria-label=\"1 jdbc 사용 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) JDBC 사용</h3>\n<ol>\n<li>\n<p>JDBC Driver 설정</p>\n<ul>\n<li>오라클 11g xe 기준 -<code class=\"language-text\">ojdbc6.jar</code>파일을 <code class=\"language-text\">WebContent\\WEP-INF\\lib</code> 폴더에 넣는다</li>\n</ul>\n</li>\n<li>\n<p>커넥션풀에 대한 정보를 DataSource에 설정</p>\n<ul>\n<li>첫번째 방법) <code class=\"language-text\">Servers\\Tomcat v9.0 Server at localhost-config\\context.xml</code> 파일에 설정해도 되고,</li>\n<li>두번째 방법) <code class=\"language-text\">Servers\\Tomcat v9.0 Server at localhost-config\\context.xml</code>을 복사해서 현 프로젝트의 <code class=\"language-text\">META-INF</code> 하단에 붙여넣기 후 편집해도 된다. </li>\n</ul>\n<p>프로젝트마다 설정하는 것이 더 안정적이므로 두번째 방법으로 하겠다.</p>\n<br>\n<p>&#x3C;META-INF \\ context.xml></p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Context</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Resource</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>jdbc/myoracle<span class=\"token punctuation\">\"</span></span> \n             <span class=\"token attr-name\">auth</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Container<span class=\"token punctuation\">\"</span></span>\n             <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>javax.sql.DataSource<span class=\"token punctuation\">\"</span></span> \n             <span class=\"token attr-name\">driverClassName</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>oracle.jdbc.OracleDriver<span class=\"token punctuation\">\"</span></span>\n             <span class=\"token attr-name\">url</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>jdbc:oracle:thin:@127.0.0.1:1521:xe<span class=\"token punctuation\">\"</span></span>\n             <span class=\"token attr-name\">username</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>SCOTT<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">password</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>TIGER<span class=\"token punctuation\">\"</span></span> \n             <span class=\"token attr-name\">maxTotal</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>20<span class=\"token punctuation\">\"</span></span> \n             <span class=\"token attr-name\">maxIdle</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>10<span class=\"token punctuation\">\"</span></span>\n             <span class=\"token attr-name\">maxWaitMillis</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>-1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Context</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>위와 같이 이렇게 <strong>이름이 “jdbc/myoracle”이고, 종류는 DataSource인</strong> resource를 생성하였다.</p>\n<br>\n<p>✅ Resource 설정값 설명</p>\n<table>\n<thead>\n<tr>\n<th>커넥션풀 설정값</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>initialSize</td>\n<td>최초로 커넥션풀 생성 시 만들 Connection 객체의 수 (기본값 0)</td>\n</tr>\n<tr>\n<td>minIdle</td>\n<td>최소한으로 유지될 Connection 객체의 수 (기본값 0)</td>\n</tr>\n<tr>\n<td>maxIdle</td>\n<td>커넥션풀에 반납된 유휴 Connection 객체를 유지할 수 있는 최대값 (기본값 8)</td>\n</tr>\n<tr>\n<td>maxTotal (= maxActive)</td>\n<td>동시에 사용할 수 있는 최대 커넥션 갯수 (기본값 8)</td>\n</tr>\n<tr>\n<td>maxWaitMillis (=maxWait)</td>\n<td>할당받을 Connection 객체가 없을 때 스레드를 블록시킬 시간 (1/1000초 단위) / -1 : 무한 대기 의미</td>\n</tr>\n</tbody>\n</table>\n<p>​\t </p>\n</li>\n<li>\n<p>.java 혹은 .jsp 파일에서 사용</p>\n<p>&#x3C;DButil.java></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">util</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>naming<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Context</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>naming<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InitialContext</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>naming<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">NamingException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DataSource</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Connection</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DBUtil</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token comment\">// datasource는 static 멤버변수로 설정 - 하나의 객체만 생성</span>\n   <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">DataSource</span> ds<span class=\"token punctuation\">;</span>   \n\t\n\t<span class=\"token keyword\">static</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n           <span class=\"token comment\">// InitialContext가 생성되면서 context.xml에 저장된 정보를 읽어온다</span>\n           <span class=\"token class-name\">Context</span> initContext <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InitialContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t\t\t\n           <span class=\"token comment\">// \"java:/comp/env\" = java environment상의 component(=재사용 가능한 객체)</span>\n           <span class=\"token comment\">// 자바 실행환경 내부에 저장된 자원을 검색해서 사용하겠다는 뜻</span>\n           <span class=\"token class-name\">Context</span> envContext  <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Context</span><span class=\"token punctuation\">)</span>initContext<span class=\"token punctuation\">.</span><span class=\"token function\">lookup</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java:/comp/env\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t\t\t\n           <span class=\"token comment\">// \"jdbc/myoracle\" 이름으로 되어있는 자원(즉 Datasource)을 ds라는 변수명으로 사용</span>\n           ds <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">DataSource</span><span class=\"token punctuation\">)</span>envContext<span class=\"token punctuation\">.</span><span class=\"token function\">lookup</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jdbc/myoracle\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           \n       <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NamingException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n           e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span>\n\t\t\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// getConnection() 메소드 실행시마다 커넥션풀로부터 커넥션 받아오는 메소드</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Connection</span> <span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">return</span> ds<span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n   <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ol>\n<br>\n<h3 id=\"2-jpa-사용\" style=\"position:relative;\"><a href=\"#2-jpa-%EC%82%AC%EC%9A%A9\" aria-label=\"2 jpa 사용 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2) JPA 사용</h3>\n<ol>\n<li>프로젝트를 JPA 프로젝트로 변환 </li>\n<li>\n<p>프로젝트를 Maven 프로젝트로 변환 </p>\n<ul>\n<li><code class=\"language-text\">pom.xml</code> 설정파일 수정하여 oracle Driver 등록 및 javax.persistence, org.hibernate 등록 </li>\n<li>lombok, slf4j 등등도 등록해서 사용</li>\n</ul>\n</li>\n<li><code class=\"language-text\">persistence.xml</code> 설정파일 수정 (1~3번 과정  이전 포스팅 참고 - <a href=\"https://hyemin-jang.github.io/Java/12.JPA/\">[Java] 12. JPA</a> )</li>\n<li>\n<p>.java 혹은 .jsp 파일에서 사용</p>\n<p>&#x3C;DBUtil.java></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">util</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>persistence<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EntityManager</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>persistence<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EntityManagerFactory</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>persistence<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Persistence</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DBUtil</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">EntityManagerFactory</span> emf<span class=\"token punctuation\">;</span>\n   \n   <span class=\"token keyword\">static</span> <span class=\"token punctuation\">{</span>\n       emf <span class=\"token operator\">=</span> <span class=\"token class-name\">Persistence</span><span class=\"token punctuation\">.</span><span class=\"token function\">createEntityManagerFactory</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myoracle\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token comment\">// EntityManagerFactory는 웹어플리케이션이 로딩되는 시점에 딱 한개만 생성</span>\n       <span class=\"token comment\">// 사용자 요청시마다(=스레드 하나 생성될때마다) EntityManager를 생성, 관리</span>\n       <span class=\"token comment\">// JDBC의 Connection Pool과 같다고 생각하면 됨</span>\n   <span class=\"token punctuation\">}</span>\n   \n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">EntityManager</span> <span class=\"token function\">getEntityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">return</span> emf<span class=\"token punctuation\">.</span><span class=\"token function\">createEntityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token comment\">// EntityManager는 스레드 간에 공유되지 않음</span>\n       <span class=\"token comment\">// 엔티티와 관련된 모든 일(CRUD) 처리</span>\n       <span class=\"token comment\">// JDBC의 Connection 객체와 같다고 생각하면 됨</span>\n   <span class=\"token punctuation\">}</span>\n   \n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       emf<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       emf <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ol>","tableOfContents":"<ul>\n<li><a href=\"/Java/13.ConnectionPool/#connection-pool%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0\">Connection Pool을 사용하는 이유</a></li>\n<li>\n<p><a href=\"/Java/13.ConnectionPool/#connection-pool-%EB%A7%8C%EB%93%A4%EA%B8%B0\">Connection Pool 만들기</a></p>\n<ul>\n<li><a href=\"/Java/13.ConnectionPool/#1--datasource\">(1)  DataSource</a></li>\n<li><a href=\"/Java/13.ConnectionPool/#2--jndi-java-naming-and-directory-interface\">(2)  JNDI (Java Naming and Directory Interface)</a></li>\n<li><a href=\"/Java/13.ConnectionPool/#-tomcat%EC%97%90%EC%84%9C-jndi-%ED%99%9C%EC%9A%A9%ED%95%B4%EC%84%9C-db%EC%97%B0%EA%B2%B0%ED%95%98%EA%B8%B0\">💎 Tomcat에서 JNDI 활용해서 DB연결하기</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/Java/13.ConnectionPool/#%EC%9B%B9-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%97%90%EC%84%9C-db-%EC%97%B0%EB%8F%99%ED%95%98%EA%B8%B0\">웹 프로젝트에서 DB 연동하기</a></p>\n<ul>\n<li><a href=\"/Java/13.ConnectionPool/#1-jdbc-%EC%82%AC%EC%9A%A9\">1) JDBC 사용</a></li>\n<li><a href=\"/Java/13.ConnectionPool/#2-jpa-%EC%82%AC%EC%9A%A9\">2) JPA 사용</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"[Java] DB연동과 Connection Pool","date":"September 05, 2021"}}},"pageContext":{"slug":"/Java/13.ConnectionPool/","previous":{"fields":{"slug":"/Algorithm/동적계획법/"},"frontmatter":{"title":"[Algorithm] 동적계획법(Dynamic Programming)"}},"next":{"fields":{"slug":"/JavaScript/1-javascript/"},"frontmatter":{"title":"[JavaScript] 자바스크립트 기초"}}}}}