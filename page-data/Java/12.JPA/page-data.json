{"componentChunkName":"component---src-templates-blog-post-js","path":"/Java/12.JPA/","result":{"data":{"site":{"siteMetadata":{"title":"Hyem.log","author":"[hyem]","siteUrl":"https://hyemin-jang.github.io","comment":{"disqusShortName":"","utterances":"hyemin-jang/hyemin-jang.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"a2732495-d972-589d-b2b5-6f45871b9aaa","excerpt":"1. JPA : Java Persistence API 자바 진영의  기술 표준. 자바 어플리케이션에서 관계형 데이터베이스를 사용하는 방식을 정의한 이다. 💡 ORM(Object Relational Mapping) SQL을 직접 다루지 않고, 객체와 테이블을 매핑하여 간접적으로 DB데이터 관리 객체 간 관계를 바탕으로 SQL 문장 자동 생성 SQL이 아닌 메소드로 데이터 조작 🌈 자바 DB연동 기술의 변천사 EJB의 Entity…","html":"<h1 id=\"1-jpa\" style=\"position:relative;\"><a href=\"#1-jpa\" aria-label=\"1 jpa permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. JPA</h1>\n<p>: <strong>Java Persistence API</strong></p>\n<p>자바 진영의 <code class=\"language-text\">ORM</code> 기술 표준. 자바 어플리케이션에서 관계형 데이터베이스를 사용하는 방식을 정의한 <code class=\"language-text\">인터페이스</code>이다.</p>\n<blockquote>\n<p>💡 <strong>ORM</strong>(Object Relational Mapping)</p>\n<ul>\n<li>SQL을 직접 다루지 않고, <strong>객체와 테이블을 매핑</strong>하여 간접적으로 DB데이터 관리</li>\n<li>객체 간 관계를 바탕으로 SQL 문장 자동 생성</li>\n<li>SQL이 아닌 메소드로 데이터 조작</li>\n</ul>\n</blockquote>\n<h3 id=\"-자바-db연동-기술의-변천사\" style=\"position:relative;\"><a href=\"#-%EC%9E%90%EB%B0%94-db%EC%97%B0%EB%8F%99-%EA%B8%B0%EC%88%A0%EC%9D%98-%EB%B3%80%EC%B2%9C%EC%82%AC\" aria-label=\" 자바 db연동 기술의 변천사 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌈 자바 DB연동 기술의 변천사</h3>\n<ol>\n<li>EJB의 Entity빈 : 구현 및 배포 어려움 등의 여러가지 이슈 있었음</li>\n<li>Hibernate : 자바 표준은 아니지만 가장 많은 개발자들이 사용하는 ORM 기술</li>\n<li>JPA : 하이버네이트 개발자들이 만든 자바 표준 ORM 기술</li>\n</ol>\n<h2 id=\"1-jpa-실행-구조\" style=\"position:relative;\"><a href=\"#1-jpa-%EC%8B%A4%ED%96%89-%EA%B5%AC%EC%A1%B0\" aria-label=\"1 jpa 실행 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) JPA 실행 구조</h2>\n<p>애플리케이션과 JDBC 사이에서 동작.</p>\n<p>개발자가 JPA를 사용하면 JPA 내부에서 JDBC API를 사용하여 SQL을 호출, DB와 통신한다.</p>\n<p><img src=\"C:%5CUsers%5Chmjan%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210821122034216.png\" alt=\"image-20210821122034216\"></p>\n<h2 id=\"2-jpa를-사용하는-이유\" style=\"position:relative;\"><a href=\"#2-jpa%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0\" aria-label=\"2 jpa를 사용하는 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2) JPA를 사용하는 이유</h2>\n<h3 id=\"1-생산성-증가-및-유지보수의-용이\" style=\"position:relative;\"><a href=\"#1-%EC%83%9D%EC%82%B0%EC%84%B1-%EC%A6%9D%EA%B0%80-%EB%B0%8F-%EC%9C%A0%EC%A7%80%EB%B3%B4%EC%88%98%EC%9D%98-%EC%9A%A9%EC%9D%B4\" aria-label=\"1 생산성 증가 및 유지보수의 용이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(1) 생산성 증가 및 유지보수의 용이</h3>\n<ul>\n<li>간단한 메소드로 CRUD가 가능하다.</li>\n<li>필드 변경시 직접 모든 SQL을 수정해야 할 필요 없이 JPA가 알아서 처리해준다.</li>\n</ul>\n<h3 id=\"2-데이터-접근-추상화-벤더-독립적-개발\" style=\"position:relative;\"><a href=\"#2-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%91%EA%B7%BC-%EC%B6%94%EC%83%81%ED%99%94-%EB%B2%A4%EB%8D%94-%EB%8F%85%EB%A6%BD%EC%A0%81-%EA%B0%9C%EB%B0%9C\" aria-label=\"2 데이터 접근 추상화 벤더 독립적 개발 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(2) 데이터 접근 추상화, 벤더 독립적 개발</h3>\n<p><img src=\"C:%5CUsers%5Chmjan%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210821122241424.png\" alt=\"image-20210821122241424\"></p>\n<ul>\n<li>Object와 RDB간의 패러다임 불일치 해결</li>\n</ul>\n<h2 id=\"3-jpa의-성능-최적화-기능\" style=\"position:relative;\"><a href=\"#3-jpa%EC%9D%98-%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94-%EA%B8%B0%EB%8A%A5\" aria-label=\"3 jpa의 성능 최적화 기능 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3) JPA의 성능 최적화 기능</h2>\n<h3 id=\"1-1차-캐시와-동일성identity-보장\" style=\"position:relative;\"><a href=\"#1-1%EC%B0%A8-%EC%BA%90%EC%8B%9C%EC%99%80-%EB%8F%99%EC%9D%BC%EC%84%B1identity-%EB%B3%B4%EC%9E%A5\" aria-label=\"1 1차 캐시와 동일성identity 보장 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(1) 1차 캐시와 동일성(identity) 보장</h3>\n<ul>\n<li>같은 트랜잭션 내에서는 같은 Entity를 반환 - 조회 성능 (약간) 향상</li>\n</ul>\n<blockquote>\n<p>💡 <strong>캐시 (Cache)</strong></p>\n<ul>\n<li>데이터를 미리 복사해 놓는 임시 저장소</li>\n<li>기존 데이터에 접근하는 시간이 오래 걸리는 경우 / 값을 다시 계산하는 시간을 절약하고 싶은 경우 사용</li>\n<li>캐시에 데이터를 미리 복사해 놓으면 접근 혹은 계산 없이 더 빠른 속도로 데이터를 가져올 수 있음</li>\n</ul>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">select문장 실행 안하는경우</code></pre></div>\n<h3 id=\"2-트랜잭션을-지원하는-쓰기-지원-transactional-write-behind\" style=\"position:relative;\"><a href=\"#2-%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98%EC%9D%84-%EC%A7%80%EC%9B%90%ED%95%98%EB%8A%94-%EC%93%B0%EA%B8%B0-%EC%A7%80%EC%9B%90-transactional-write-behind\" aria-label=\"2 트랜잭션을 지원하는 쓰기 지원 transactional write behind permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(2) 트랜잭션을 지원하는 쓰기 지원 (transactional write-behind)</h3>\n<ul>\n<li>Update, Delete로 인한 로우(Row) 락 시간 최소화</li>\n<li>지연 로딩 ???????? 뭔소리야</li>\n</ul>\n<p><br></br></p>\n<hr>\n<h1 id=\"2-jpa-application-개발\" style=\"position:relative;\"><a href=\"#2-jpa-application-%EA%B0%9C%EB%B0%9C\" aria-label=\"2 jpa application 개발 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. JPA Application 개발</h1>\n<h2 id=\"1-개발-환경-구축\" style=\"position:relative;\"><a href=\"#1-%EA%B0%9C%EB%B0%9C-%ED%99%98%EA%B2%BD-%EA%B5%AC%EC%B6%95\" aria-label=\"1 개발 환경 구축 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) 개발 환경 구축</h2>\n<ol>\n<li>JPA 프로젝트로 변환</li>\n<li>Maven 프로젝트로 변환 - </li>\n</ol>\n<h3 id=\"-jpa-설정파일-persistencexml-이해하기\" style=\"position:relative;\"><a href=\"#-jpa-%EC%84%A4%EC%A0%95%ED%8C%8C%EC%9D%BC-persistencexml-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0\" aria-label=\" jpa 설정파일 persistencexml 이해하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💎 JPA 설정파일 (persistence.xml) 이해하기</h3>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>persistence</span> <span class=\"token attr-name\">version</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2.1<span class=\"token punctuation\">\"</span></span> \n             <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://xmlns.jcp.org/xml/ns/persistence<span class=\"token punctuation\">\"</span></span> \n             <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span> \n             <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\t\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>persistence-unit</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>oracleDB<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\t\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>class</span><span class=\"token punctuation\">></span></span>model.entity.Customer<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>class</span><span class=\"token punctuation\">></span></span>\n\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>properties</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>javax.persistence.jdbc.driver<span class=\"token punctuation\">\"</span></span> \n                      <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>oracle.jdbc.OracleDriver<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>javax.persistence.jdbc.url<span class=\"token punctuation\">\"</span></span> \n                      <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>jdbc:oracle:thin:@127.0.0.1:1521:xe<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>javax.persistence.jdbc.user<span class=\"token punctuation\">\"</span></span> \n                      <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>SCOTT<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>javax.persistence.jdbc.password<span class=\"token punctuation\">\"</span></span> \n                      <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>TIGER<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n\n            <span class=\"token comment\">&lt;!-- 방언처리기 --></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hibernate.dialect<span class=\"token punctuation\">\"</span></span> \n                      <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>org.hibernate.dialect.OracleDialect<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>hibernate.hbm2ddl.auto<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>create<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>properties</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>persistence-unit</span><span class=\"token punctuation\">></span></span>\t\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>persistence</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<ul>\n<li>\n<p><code class=\"language-text\">&lt;persistence-unit&gt;</code> : JPA가 연동할 DataBase에 대한 정보 보유 (연동하고자 하는 DB가 여러개인 경우 여러개의 persistence-unit 설정하면 됨)</p>\n<ul>\n<li>JDBC Driver 종류 / url / user /password 정보 가지고 있음</li>\n</ul>\n</li>\n<li><code class=\"language-text\">&lt;class&gt;model.entity.Customer&lt;/class&gt;</code> : Entity 클래스를 등록</li>\n<li>\n<p>각 속성(property)의 의미</p>\n<ul>\n<li><code class=\"language-text\">&lt;property name=&quot;hibernate.show_sql&quot; value=&quot;true&quot; /&gt;</code> : 콘솔창에 생성된 sql문 출력하겠다</li>\n<li><code class=\"language-text\">&lt;property name=&quot;hibernate.id.new_generator_mappings&quot; value=&quot;true&quot; /&gt;</code> : </li>\n<li><code class=\"language-text\">&lt;property name=&quot;hibernate.hbm2ddl.auto&quot; value=&quot;create&quot; /&gt;</code> : DDL(테이블 생성, 삭제, 변경)을 자동으로 실행하겠다. (실행하지 않으려는 경우 value=“none”)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-연관관계-매핑\" style=\"position:relative;\"><a href=\"#2-%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84-%EB%A7%A4%ED%95%91\" aria-label=\"2 연관관계 매핑 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2) 연관관계 매핑</h2>\n<p>: 객체의 참조 관계와 테이블의 외래키를 매핑하는 것을 의미</p>\n<p>​\t⚡ Member 객체가 Team 객체를 참조하는 경우</p>\n<p><img src=\"C:%5Cdevelopment%5Cgithubpage%5Cmy-blog%5Ccontent%5Cassets%5Cposting%20images%5Cimage-20210821133801987.png\" alt=\"image-20210821133801987\"></p>\n<ul>\n<li>JDBC : 연관 관계이 있는 상대 테이블의 PK를 멤버변수로 가진다</li>\n<li>JPA : <strong>엔티티 객체 자체를 통채로 참조한다</strong></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// JDBC에서의 설계</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> memberId<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> teamId<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// JPA에서의 설계</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> memberId<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Team</span> team<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 엔티티 객체를 참조</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"1--다중성---해당-엔티티를-중심으로-상대-엔티티를-바라봤을때\" style=\"position:relative;\"><a href=\"#1--%EB%8B%A4%EC%A4%91%EC%84%B1---%ED%95%B4%EB%8B%B9-%EC%97%94%ED%8B%B0%ED%8B%B0%EB%A5%BC-%EC%A4%91%EC%8B%AC%EC%9C%BC%EB%A1%9C-%EC%83%81%EB%8C%80-%EC%97%94%ED%8B%B0%ED%8B%B0%EB%A5%BC-%EB%B0%94%EB%9D%BC%EB%B4%A4%EC%9D%84%EB%95%8C\" aria-label=\"1  다중성   해당 엔티티를 중심으로 상대 엔티티를 바라봤을때 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(1)  <strong>다중성</strong> - 해당 엔티티를 중심으로 상대 엔티티를 바라봤을때</h3>\n<ul>\n<li>OneToOne : 일대일 관계</li>\n<li>OneToMany : 일대다 관계</li>\n<li>ManyToOne : 다대일 관계</li>\n<li>ManyToMany : 다대다 관계</li>\n</ul>\n<p>DB 설계상 <strong>‘다’인 쪽이 외래 키를 갖는다</strong>. 😊무.조.건.</p>\n<h3 id=\"2-방향\" style=\"position:relative;\"><a href=\"#2-%EB%B0%A9%ED%96%A5\" aria-label=\"2 방향 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(2) 방향</h3>\n<p>데이터베이스 테이블은 외래키 하나로 양쪽 테이블을 조인하므로 단방향이니 양방향이니 나눌 필요가 없다.</p>\n<p>하지만 객체는 참조용 필드가 있는 객체만 다른 객체를 참조하는 것이 가능하므로, JPA를 사용하여 데이터베이스와 패러다임을 맞추기 위해서는 연관관계의 방향을 선택해야 한다.</p>\n<ul>\n<li><strong>단방향 관계</strong> : 한쪽의 엔티티만 참조용 필드를 갖고 다른 객체를 참조하고 있는 것</li>\n<li><strong>양방향 관계</strong> : 양쪽 엔티티가 각각 참조용 필드를 갖고 서로 참조하고 있는 것</li>\n</ul>\n<blockquote>\n<p>🤷‍♀️ 어떻게 판단하나요?</p>\n<ul>\n<li>다대일 단방향 관계 : member1.getTeam() 처럼 멤버가 팀을 참조 가능</li>\n<li>양방향 관계 : team1.getMember()처럼 팀이 멤버를 참조도 가능하게 하려면 양방향으로 설정하면 됨</li>\n</ul>\n<p>=> 역방향으로 객체 탐색이 꼭 필요할때 양방향 관계를 설정하자</p>\n</blockquote>\n<h3 id=\"3-연관관계의-주인owner\" style=\"position:relative;\"><a href=\"#3-%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84%EC%9D%98-%EC%A3%BC%EC%9D%B8owner\" aria-label=\"3 연관관계의 주인owner permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(3) 연관관계의 주인(Owner)</h3>\n<ul>\n<li>두 객체가 양방향 관계를 가질 때, 연관관계의 주인을 지정해야 한다.</li>\n<li>\n<p><strong>외래키를 갖는 테이블</strong>이 연관관계의 주인이 된다. 😊무.조.건.</p>\n<ul>\n<li>주인 쪽이 외래키를 관리(등록, 수정, 삭제)할 수 있고, 다른 쪽은 읽기만 가능하다.</li>\n</ul>\n</li>\n<li>주인이 아닌 객체 쪽에서 <code class=\"language-text\">mappedBy</code> 속성을 사용하면 된다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Team</span><span class=\"token punctuation\">{</span>\t\n\t<span class=\"token annotation punctuation\">@Id</span>\t\n\t<span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"team_id\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> teamId<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>length<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"team_name\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> teamName<span class=\"token punctuation\">;</span>\n\t\n    <span class=\"token comment\">/* 해당 엔티티(Team)가 상대 엔티티(Member)의 여러 객체를 가질 수 있음 \n     * `일`인 쪽에 @OneToMany를 추가하여 양방향 관계 만듬 \n     * \t- 팀에서 여러 멤버들을 참조 가능하게 ArrayList 만들어준다\n     * mappedBy 사용하여 연관관계의 주인을 설정해줌 \n     * \t- mappedBy의 값은 대상이 되는 변수명(Member 테이블의 teamId 변수)\n     */</span>\n\t<span class=\"token annotation punctuation\">@OneToMany</span><span class=\"token punctuation\">(</span>mappedBy<span class=\"token operator\">=</span><span class=\"token string\">\"teamId\"</span><span class=\"token punctuation\">)</span>       \n\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">></span></span> members <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t\n\n<span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Id</span>\n    <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"member_id\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> memberId<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>length<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// JoinColumn : 외래키를 매핑하는 애노테이션. </span>\n    <span class=\"token comment\">// 해당 엔티티(Member)의 여러 객체가 상대 엔티티(Team)에 대응 - 다대일 관계(@ManyToOne)</span>\n    <span class=\"token annotation punctuation\">@JoinColumn</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"team_id\"</span><span class=\"token punctuation\">)</span>  \n    <span class=\"token annotation punctuation\">@ManyToOne</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Team</span> team<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"3-개발-proccess\" style=\"position:relative;\"><a href=\"#3-%EA%B0%9C%EB%B0%9C-proccess\" aria-label=\"3 개발 proccess permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3) 개발 Proccess</h2>\n<ul>\n<li>EntityManagerFactory 생성 </li>\n<li>EntityManager 생성 </li>\n<li>EntityTransaction 생성 및 적용 </li>\n<li>비즈니스 로직(CRUD) </li>\n<li>자원반환</li>\n</ul>\n<h3 id=\"-jpa-주요-api\" style=\"position:relative;\"><a href=\"#-jpa-%EC%A3%BC%EC%9A%94-api\" aria-label=\" jpa 주요 api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎈 JPA 주요 API</h3>\n<table>\n<thead>\n<tr>\n<th>API</th>\n<th>역할</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Persistence</td>\n<td>EntityManagerFactory 인스턴스를 얻기 위한 메소드를 가짐 = <code class=\"language-text\">createEntityManagerFactory()</code></td>\n</tr>\n<tr>\n<td>EntityManagerFactory</td>\n<td>여러 EntityManager 인스턴스를 작성하고 관리</td>\n</tr>\n<tr>\n<td>EntityManager</td>\n<td>객체의 지속성 작업을 관리. CRUD 수행.</td>\n</tr>\n<tr>\n<td>EntityTransaction</td>\n<td>EntityManager와 1:1 관계. 각 EntityManager의 작업은 EntityTransaction 클래스에 의해 유지 관리.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"-entitymanager-의-crud-수행-메소드\" style=\"position:relative;\"><a href=\"#-entitymanager-%EC%9D%98-crud-%EC%88%98%ED%96%89-%EB%A9%94%EC%86%8C%EB%93%9C\" aria-label=\" entitymanager 의 crud 수행 메소드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🎈 EntityManager 의 CRUD 수행 메소드</h3>\n<table>\n<thead>\n<tr>\n<th>메소드</th>\n<th>기능</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>persist(Object entity)</td>\n<td>entity를 영속화 (INSERT)</td>\n</tr>\n<tr>\n<td>merge(Object entity)</td>\n<td>준영속 상태의 entity를 영속화 (UPDATE)</td>\n</tr>\n<tr>\n<td>remove(Object entity)</td>\n<td>영속 상태의 entity를 제거 (DELETE)</td>\n</tr>\n<tr>\n<td>find(Class entity, Object pk)</td>\n<td>하나의 entity 검색 (SELECT one)</td>\n</tr>\n<tr>\n<td>createQuery(String jpql, Class resultClass)</td>\n<td>JPQL에 해당하는 entity 목록 검색 (SELECT list)</td>\n</tr>\n</tbody>\n</table>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RunningTest</span> <span class=\"token punctuation\">{</span>\n\t\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">EntityManagerFactory</span> emf <span class=\"token operator\">=</span> <span class=\"token class-name\">Persistence</span><span class=\"token punctuation\">.</span><span class=\"token function\">createEntityManagerFactory</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"oracleDB\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">EntityManager</span> em <span class=\"token operator\">=</span> emf<span class=\"token punctuation\">.</span><span class=\"token function\">createEntityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">EntityTransaction</span> tx <span class=\"token operator\">=</span> em<span class=\"token punctuation\">.</span><span class=\"token function\">getTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n        tx<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 엔티티 클래스의 setter 메소드 - tx.commit() 시에 UPDATE문 수행 </span>\n            <span class=\"token class-name\">Team</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Team</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            t1<span class=\"token punctuation\">.</span><span class=\"token function\">setTeamName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"우리팀\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\">Member</span> m1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            m1<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"장보리\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            m1<span class=\"token punctuation\">.</span><span class=\"token function\">setTeamId</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\">Member</span> m2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            m2<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"서리태\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            m2<span class=\"token punctuation\">.</span><span class=\"token function\">setTeamId</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            t1<span class=\"token punctuation\">.</span><span class=\"token function\">getMembers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>m1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            t1<span class=\"token punctuation\">.</span><span class=\"token function\">getMembers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>m2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            t1<span class=\"token punctuation\">.</span><span class=\"token function\">getMembers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>m3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// INSERT</span>\n            em<span class=\"token punctuation\">.</span><span class=\"token function\">persist</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            em<span class=\"token punctuation\">.</span><span class=\"token function\">persist</span><span class=\"token punctuation\">(</span>m1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\n            em<span class=\"token punctuation\">.</span><span class=\"token function\">persist</span><span class=\"token punctuation\">(</span>m2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           \n            <span class=\"token comment\">// SELECT one</span>\n            <span class=\"token class-name\">Member</span> oneMember <span class=\"token operator\">=</span> em<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// pk값(1L)으로 조회</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"조회한 멤버 : \"</span> <span class=\"token operator\">+</span> oneMember<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            \n            <span class=\"token comment\">// SELECT list</span>\n            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Member</span><span class=\"token punctuation\">></span></span> allMember <span class=\"token operator\">=</span> em<span class=\"token punctuation\">.</span><span class=\"token function\">createQuery</span><span class=\"token punctuation\">(</span>\n                <span class=\"token string\">\"select m from Member m\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResultList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"멤버 수 : \"</span> <span class=\"token operator\">+</span> allMember<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t    <span class=\"token comment\">// DELETE</span>\n            em<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 객체를 파라미터로 받아서 pk값을 통해 해당 데이터 삭제</span>\n\n            tx<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            \n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 에러 발생시 CRUD 결과 저장하지 않고 rollback</span>\n\t\t\ttx<span class=\"token punctuation\">.</span><span class=\"token function\">rollback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 자원반환</span>\n\t\t\tem<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\temf<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>[참고한 사이트]</p>\n<p><a href=\"https://jeong-pro.tistory.com/231\">https://jeong-pro.tistory.com/231</a></p>","frontmatter":{"title":"[Java] 12. JPA","date":"August 21, 2021"}}},"pageContext":{"slug":"/Java/12.JPA/","previous":{"fields":{"slug":"/Java/11.JDBC/"},"frontmatter":{"title":"[Java] 11. JDBC"}},"next":null}}}