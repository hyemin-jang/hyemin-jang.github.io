{"componentChunkName":"component---src-templates-blog-post-js","path":"/Java/3.접근제한자와 & Static/","result":{"data":{"site":{"siteMetadata":{"title":"Hyem.log","author":"[hyem]","siteUrl":"https://hyemin-jang.github.io","comment":{"disqusShortName":"","utterances":"hyemin-jang/hyemin-jang.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"fd31195c-3cd8-53a5-b87a-16c46a035fc4","excerpt":"접근제한자 (Access Modifier) 클래스, 클래스 내부의 변수/메서드/생성자에 대한 접근 권한 지정. 적용 위치 : 클래스 선언구 : public, default만 사용 가능  주의⚡ :  .java 파일 내에 여러 클래스를 생성할 수 있지만, public 클래스는 하나만 존재할 수 있다 변수, 생성자, 메소드 선언구 : 4가지 다 사용 가능 종류 Access…","html":"<h2 id=\"접근제한자-access-modifier\" style=\"position:relative;\"><a href=\"#%EC%A0%91%EA%B7%BC%EC%A0%9C%ED%95%9C%EC%9E%90-access-modifier\" aria-label=\"접근제한자 access modifier permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>접근제한자 (Access Modifier)</h2>\n<p>클래스, 클래스 내부의 변수/메서드/생성자에 대한 접근 권한 지정.</p>\n<p>적용 위치 :</p>\n<ul>\n<li>\n<p>클래스 선언구 : public, default만 사용 가능 </p>\n<ul>\n<li>주의⚡ :  .java 파일 내에 여러 클래스를 생성할 수 있지만, public 클래스는 하나만 존재할 수 있다</li>\n</ul>\n</li>\n<li>변수, 생성자, 메소드 선언구 : 4가지 다 사용 가능</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>종류</th>\n<th>Access 범위</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">public</code></td>\n<td><strong>모든 곳</strong>에서 접근 가능</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">protected</code></td>\n<td><strong>같은 패키지 내</strong>에서 호출 가능, <strong>상속 관계의 하위 클래스</strong>에서는 패키지가 달라도 호출 가능</td>\n</tr>\n<tr>\n<td>default (생략된 형태)</td>\n<td><strong>같은 패키지 내에서만</strong> 호출 가능</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">private</code></td>\n<td><strong>같은 클래스 내에서만</strong> 호출 가능</td>\n</tr>\n</tbody>\n</table>\n<br>\n<h2 id=\"정보-은닉\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%B3%B4-%EC%9D%80%EB%8B%89\" aria-label=\"정보 은닉 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정보 은닉</h2>\n<h3 id=\"1-get-set-메서드\" style=\"position:relative;\"><a href=\"#1-get-set-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"1 get set 메서드 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) get(), set() 메서드</h3>\n<p>이전 포스팅에서 봤듯이 클래스 내의 멤버변수를 호출하려면\n<code class=\"language-text\">참조변수.멤버변수</code> 와 같이 참조변수에 도트연산자를 통해 호출하면 된다.\n그러나 이렇게 멤버변수를 참조하여 클래스에 직접 접근하는 것은 권장되지 않는다. </p>\n<p>예를 들어, Student 클래스의 멤버변수인 studentID는 음수가 될 수 없는 데이터라고 가정하자.\n그러나 멤버변수에 직접 접근한다면 음수를 대입해버려도 막을 방법이 없기 때문에 클래스 정보 자체가 훼손될 위험이 있다. </p>\n<p>이를 해결하기 위해 <strong>멤버변수는 private으로 선언</strong>하고, 대신 <strong>get, set 메서드를 public으로 선언</strong>하여 외부에서 사용할 수 있도록 만들어보자.</p>\n<blockquote>\n<p>⚡ 이클립스 단축키\n: alt + shift + s => Generate Getters and Setters… 선택</p>\n</blockquote>\n<p>&#x3C;Student.java 파일></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// private 변수로 선언 - 해당 클래스 외 다른 곳에서는 접근 불가</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> studentID<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> studentName<span class=\"token punctuation\">;</span>\t\t\n\n\t<span class=\"token comment\">// get메서드 </span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getStudentID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> studentID<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// set메서드를 이용해서 값 설정에 제한 둘 수 있음</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setStudentID</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> studentID<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>studentID <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>studentID <span class=\"token operator\">=</span> studentID<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\t\t\t\n\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"잘못된 값입니다\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getStudentName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> studentName<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setStudentName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> studentName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>studentName <span class=\"token operator\">=</span> studentName<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>&#x3C;StudentTest.java 파일></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StudentTest</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">Student</span> student1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">Student</span> student2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\n\t\t\t\t\t\t\n<span class=\"token comment\">//\tstudent1.studentID = 10;  오류 발생 (private 변수에 직접 접근 불가)</span>\n\t\tstudent1<span class=\"token punctuation\">.</span><span class=\"token function\">setStudentID</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tstudent2<span class=\"token punctuation\">.</span><span class=\"token function\">setStudentID</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>student1<span class=\"token punctuation\">.</span><span class=\"token function\">getStudentID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"잘못된 접근입니다\"</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>student2<span class=\"token punctuation\">.</span><span class=\"token function\">getStudentID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 10</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<h2 id=\"static\" style=\"position:relative;\"><a href=\"#static\" aria-label=\"static permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Static</h2>\n<p>객체(인스턴스) 생성과 상관 없이, 클래스가 메모리에 올라갈 때 자동으로 생성되어 그 값을 모든 인스턴스가 공유함.</p>\n<p>사용 위치 :</p>\n<ul>\n<li>변수</li>\n<li>메소드</li>\n<li>static 중괄호 { }</li>\n</ul>\n<h3 id=\"1-static-변수\" style=\"position:relative;\"><a href=\"#1-static-%EB%B3%80%EC%88%98\" aria-label=\"1 static 변수 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) Static 변수</h3>\n<ul>\n<li>‘정적 변수’라고도 함.</li>\n<li>클래스가 공통으로 사용하는 변수</li>\n<li>다른 멤버변수들처럼 객체(인스턴스)가 생성될 때마다 새로 생성되는 게 아니라, <strong>프로그램이 실행되어 메모리에 올라갔을 때 딱 한번 메모리 공간에 할당됨</strong>. 그리고 그 값을 클래스의 모든 인스턴스가 공유함</li>\n</ul>\n<br>\n<p>🎈 Student 클래스가 모두 공유하는 <code class=\"language-text\">serialNum</code>이라는 static 변수를 만들어서, 이를 활용해 Student 객체가 생성될 때마다 학번을 자동으로 부여해보자.</p>\n<p>&#x3C;Student.java 파일></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> serialNum <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// serialNum 값 초기화</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> studentID<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> studentName<span class=\"token punctuation\">;</span>\t\t\n\t\n\t<span class=\"token comment\">// 생성자를 통해 serialNum을 객체가 생성될때마다 1씩 증가시켜서 studentID에 대입시키기</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tserialNum<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\tstudentID <span class=\"token operator\">=</span> serialNum<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getStudentID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> studentID<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getStudentName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> studentName<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setStudentName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> studentName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>studentName <span class=\"token operator\">=</span> studentName<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>&#x3C;StudentTest.java> 파일</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StudentTest</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">Student</span> student1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">Student</span> student2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\n\t\t\t\t\t\t\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>student1<span class=\"token punctuation\">.</span><span class=\"token function\">getStudentID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 1001</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>student2<span class=\"token punctuation\">.</span><span class=\"token function\">getStudentID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 1002</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>serialNum 변수는 static이기 때문에,\n서로 다른 참조변수인 student1, student2가 동일한 serialNum 변수의 메모리를 참조하고 있다.\nstudent1 인스턴스가 생성될 때 serialNum의 값은 1001이 되었고, 또다른 student2 인스턴스가 생성될 때 serialNum의 값이 1002가 된 것을 확인할 수 있다.</p>\n<br>\n<p>⚡ <strong>static 변수는 클래스 이름으로 참조하여 사용할 수 있다.</strong></p>\n<ul>\n<li>static 변수는 클래스의 모든 인스턴스가 공유하므로, 인스턴스보다 먼저 생성된다.</li>\n<li><code class=\"language-text\">student1.serialNum</code>과 같이 인스턴스로 참조할 수도 있지만, 보통  <code class=\"language-text\">Student.serialNum</code> 과 같이 클래스 이름으로 직접 참조해서 사용한다.</li>\n</ul>\n<br>\n<h3 id=\"2-static-메서드--클래스-메서드\" style=\"position:relative;\"><a href=\"#2-static-%EB%A9%94%EC%84%9C%EB%93%9C--%ED%81%B4%EB%9E%98%EC%8A%A4-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"2 static 메서드  클래스 메서드 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2) Static 메서드 (= 클래스 메서드)</h3>\n<p>🌈 어떤 클래스가 <strong>메서드의 기능만 수행할 때 (그 클래스의 객체를 만드는 게 의미가 없을때)</strong> 그 메서드는 static으로 만들면 된다.</p>\n<ul>\n<li>\n<p>클래스 메서드 내에서는 멤버변수 사용 불가능하다</p>\n<p>: 클래스 메서드는 <strong>인스턴스 생성 전</strong>에 만들어지기 때문에, 인스턴스가 만들어지는 순간에 생성되는 멤버변수(=인스턴스변수)를 포함할 수 없다.</p>\n</li>\n</ul>\n<br>\n<p>&#x3C;Student.java 파일></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> serialNum <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> studentID<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> studentName<span class=\"token punctuation\">;</span>\t\t\n\t\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tserialNum<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\tstudentID <span class=\"token operator\">=</span> serialNum<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token comment\">// 클래스 메서드</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getSerialNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// getSerialNum 메서드의 로컬변수는 당연 생성 가능</span>\n\t\t<span class=\"token comment\">// studentName = \"김철수\";    => 오류 발생. 멤버변수 사용 불가.</span>\n\t\t<span class=\"token keyword\">return</span> serialNum<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setSerialNum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> serialNum<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">Student</span><span class=\"token punctuation\">.</span>serialNum <span class=\"token operator\">=</span> serialNum<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getStudentID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> studentID<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\t\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getStudentName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> studentName<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setStudentName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> studentName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>studentName <span class=\"token operator\">=</span> studentName<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>&#x3C;StudentTest.java 파일></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StudentTest</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// static 메서드이므로 객체 생성 전 사용 가능</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSerialNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 1000</span>\n\t\t\n\t\t<span class=\"token class-name\">Student</span> student1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t\t\t\t\t\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSerialNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 1001</span>\n\t\t\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>","tableOfContents":"<ul>\n<li><a href=\"/Java/3.%EC%A0%91%EA%B7%BC%EC%A0%9C%ED%95%9C%EC%9E%90%EC%99%80%20&#x26;%20Static/#%EC%A0%91%EA%B7%BC%EC%A0%9C%ED%95%9C%EC%9E%90-access-modifier\">접근제한자 (Access Modifier)</a></li>\n<li>\n<p><a href=\"/Java/3.%EC%A0%91%EA%B7%BC%EC%A0%9C%ED%95%9C%EC%9E%90%EC%99%80%20&#x26;%20Static/#%EC%A0%95%EB%B3%B4-%EC%9D%80%EB%8B%89\">정보 은닉</a></p>\n<ul>\n<li><a href=\"/Java/3.%EC%A0%91%EA%B7%BC%EC%A0%9C%ED%95%9C%EC%9E%90%EC%99%80%20&#x26;%20Static/#1-get-set-%EB%A9%94%EC%84%9C%EB%93%9C\">1) get(), set() 메서드</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/Java/3.%EC%A0%91%EA%B7%BC%EC%A0%9C%ED%95%9C%EC%9E%90%EC%99%80%20&#x26;%20Static/#static\">Static</a></p>\n<ul>\n<li><a href=\"/Java/3.%EC%A0%91%EA%B7%BC%EC%A0%9C%ED%95%9C%EC%9E%90%EC%99%80%20&#x26;%20Static/#1-static-%EB%B3%80%EC%88%98\">1) Static 변수</a></li>\n<li><a href=\"/Java/3.%EC%A0%91%EA%B7%BC%EC%A0%9C%ED%95%9C%EC%9E%90%EC%99%80%20&#x26;%20Static/#2-static-%EB%A9%94%EC%84%9C%EB%93%9C--%ED%81%B4%EB%9E%98%EC%8A%A4-%EB%A9%94%EC%84%9C%EB%93%9C\">2) Static 메서드 (= 클래스 메서드)</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"[Java] 접근제한자와 정보 은닉 & Static","date":"July 29, 2021"}}},"pageContext":{"slug":"/Java/3.접근제한자와 & Static/","previous":{"fields":{"slug":"/Java/2.클래스와-객체/"},"frontmatter":{"title":"[Java] 클래스와 객체"}},"next":{"fields":{"slug":"/Java/4.상속과 다형성/"},"frontmatter":{"title":"[Java] 상속과 다형성"}}}}}