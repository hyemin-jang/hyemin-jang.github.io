{"componentChunkName":"component---src-templates-blog-post-js","path":"/Java/1.변수와 자료형/","result":{"data":{"site":{"siteMetadata":{"title":"Hyem.log","author":"[hyem]","siteUrl":"https://hyemin-jang.github.io","comment":{"disqusShortName":"","utterances":"hyemin-jang/hyemin-jang.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"eb24c36b-a9d7-58bd-9ce6-740b5de504e4","excerpt":"1. 변수와 자료형 1) 변수 선언 : 선언한 변수 이름으로 어떤 위치에 있는 메모리를 얼마만큼 사용하겠다는 뜻 변수의 자료형 선택 변수 이름 정하기 값 대입 ⚡변수 이름 정할 때 제약사항⚡ 영문자(대소문자)나 숫자 사용 가능, 특수문자는 , 만 사용 가능 변수 이름은 숫자로 시작할 수 없음 자바에서 사용하는 예약어는 사용할 수 없음 (while, int, break…","html":"<h1 id=\"1-변수와-자료형\" style=\"position:relative;\"><a href=\"#1-%EB%B3%80%EC%88%98%EC%99%80-%EC%9E%90%EB%A3%8C%ED%98%95\" aria-label=\"1 변수와 자료형 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 변수와 자료형</h1>\n<h2 id=\"1-변수-선언\" style=\"position:relative;\"><a href=\"#1-%EB%B3%80%EC%88%98-%EC%84%A0%EC%96%B8\" aria-label=\"1 변수 선언 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) 변수 선언</h2>\n<p>: 선언한 변수 이름으로 어떤 위치에 있는 메모리를 얼마만큼 사용하겠다는 뜻</p>\n<ul>\n<li>변수의 자료형 선택</li>\n<li>변수 이름 정하기</li>\n<li>\n<p>값 대입</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> level <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 메모리의 int형 크기(4바이트) 공간이 level이라는 이름으로 할당된다.</span></code></pre></div>\n</li>\n</ul>\n<p>⚡<strong>변수 이름 정할 때 제약사항</strong>⚡</p>\n<ul>\n<li>영문자(대소문자)나 숫자 사용 가능, 특수문자는 <code class=\"language-text\">$</code>, <code class=\"language-text\">_</code>만 사용 가능</li>\n<li>변수 이름은 숫자로 시작할 수 없음</li>\n<li>자바에서 사용하는 예약어는 사용할 수 없음 (while, int, break ..등)</li>\n<li>🐫 <strong>카멜 표기법</strong> 따름\n: 소문자로 시작, 중간에 다른 뜻의 단어가 시작할 때 첫글자를 대문자로 사용 (예: numberOfStudent) </li>\n</ul>\n<h2 id=\"2-변수의-자료형\" style=\"position:relative;\"><a href=\"#2-%EB%B3%80%EC%88%98%EC%9D%98-%EC%9E%90%EB%A3%8C%ED%98%95\" aria-label=\"2 변수의 자료형 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2) 변수의 자료형</h2>\n<h3 id=\"1-기본-자료형\" style=\"position:relative;\"><a href=\"#1-%EA%B8%B0%EB%B3%B8-%EC%9E%90%EB%A3%8C%ED%98%95\" aria-label=\"1 기본 자료형 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(1) 기본 자료형</h3>\n<p>: 자바 라이브러리에서 기본으로 제공. 얼마만큼의 메모리를 어떻게 사용할 것인지 이미 정해져있음.</p>\n<table>\n<thead>\n<tr>\n<th>크기/형태</th>\n<th>정수형</th>\n<th>문자형</th>\n<th>실수형</th>\n<th>논리형</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1바이트</td>\n<td>byte</td>\n<td>-</td>\n<td>-</td>\n<td>boolean</td>\n</tr>\n<tr>\n<td>2바이트</td>\n<td>short</td>\n<td>char</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>4바이트</td>\n<td>int</td>\n<td>-</td>\n<td>float</td>\n<td>-</td>\n</tr>\n<tr>\n<td>8바이트</td>\n<td>long</td>\n<td>-</td>\n<td>double</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>\n<p>정수 자료형</p>\n<ul>\n<li>자바는 모든 정수값을 기본으로 int형으로 처리.</li>\n<li>long형 변수 선언시 int형 범위 내의 숫자를 대입하면 자바가 자동으로 int형으로 처리함. 그러나 int형 범위를 넘어서는 숫자의 경우 long형으로 처리하라고 컴파일러에게 알려주기 위해 숫자 뒤에 <code class=\"language-text\">L</code>/<code class=\"language-text\">l</code> 붙임\n<code class=\"language-text\">예) long num = 12345678900L;</code></li>\n</ul>\n</li>\n<li>\n<p>문자 자료형</p>\n<ul>\n<li>문자(char)를 사용할 때는 작은따옴표 사용 (문자열(String)을 사용할 때는 큰따옴표 사용) </li>\n<li>문자를 변수에 대입하면 그 문자에 해당하는 정수값(아스키코드값)이 저장됨 / char형 변수에 정수 대입도 가능(음수는 불가)</li>\n</ul>\n</li>\n<li>\n<p>실수 자료형</p>\n<ul>\n<li>자바에서 실수는 기본적으로 double형 사용</li>\n<li>float형으로 사용하려면 숫자 뒤에 <code class=\"language-text\">F</code>/<code class=\"language-text\">f</code>붙임\n<code class=\"language-text\">예) float num = 3.14F;</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-참조-자료형\" style=\"position:relative;\"><a href=\"#2-%EC%B0%B8%EC%A1%B0-%EC%9E%90%EB%A3%8C%ED%98%95\" aria-label=\"2 참조 자료형 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(2) 참조 자료형</h3>\n<p><strong>= 클래스형</strong> (다음 포스팅에서 자세히)</p>\n<hr>\n<h1 id=\"2-형-변환-casting\" style=\"position:relative;\"><a href=\"#2-%ED%98%95-%EB%B3%80%ED%99%98-casting\" aria-label=\"2 형 변환 casting permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 형 변환 (Casting)</h1>\n<h2 id=\"1-묵시적-형-변환-upcasting\" style=\"position:relative;\"><a href=\"#1-%EB%AC%B5%EC%8B%9C%EC%A0%81-%ED%98%95-%EB%B3%80%ED%99%98-upcasting\" aria-label=\"1 묵시적 형 변환 upcasting permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) 묵시적 형 변환 (Upcasting)</h2>\n<ul>\n<li>\n<p>변수에 값 대입시나 연산시에 자동으로 이루어짐</p>\n<ul>\n<li>크기가 작은 자료형 -> 큰 자료형 </li>\n<li>덜 정밀한 자료형에서 더 정밀한 자료형\n<img src=\"https://images.velog.io/images/hmjang28/post/d6b4de48-a241-4ce2-8668-e0b12d25be09/image.png\"></li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">byte</span> b <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// byte형 변수 b가 int형으로 자동 형변환</span>\n\n<span class=\"token keyword\">int</span> i2 <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> f <span class=\"token operator\">=</span> i2<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 같은 4바이트지만 int형 변수가 덜 정밀하므로 float형으로 자동 형변환</span>\n\n<span class=\"token keyword\">int</span> i2 <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> f <span class=\"token operator\">=</span> i2<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> d <span class=\"token operator\">=</span> i2 <span class=\"token operator\">+</span> f<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 1) i2 + f 에서 int형이 float형으로 변환</span>\n\t\t                <span class=\"token comment\">// 2) 더한 결과값이 d에 대입되면서 double형으로 변환</span></code></pre></div>\n<h2 id=\"2-명시적-형-변환-downcasting\" style=\"position:relative;\"><a href=\"#2-%EB%AA%85%EC%8B%9C%EC%A0%81-%ED%98%95-%EB%B3%80%ED%99%98-downcasting\" aria-label=\"2 명시적 형 변환 downcasting permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2) 명시적 형 변환 (Downcasting)</h2>\n<ul>\n<li>묵시적 형 변환과 반대 방향으로 형 변환하는 경우, 자료형을 명시적으로 써주어야 함.</li>\n<li>값이 바꿀 자료형의 범위를 넘는 경우 자료 손실이 발생할 수 있음</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">byte</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">)</span> i<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// int형을 강제로 byte형으로 형변환</span></code></pre></div>\n<hr>\n<h1 id=\"3-상수와-리터럴\" style=\"position:relative;\"><a href=\"#3-%EC%83%81%EC%88%98%EC%99%80-%EB%A6%AC%ED%84%B0%EB%9F%B4\" aria-label=\"3 상수와 리터럴 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 상수와 리터럴</h1>\n<p><strong>상수(constant)</strong></p>\n<ul>\n<li>항상 변하지 않는 값</li>\n<li>\n<p><code class=\"language-text\">final</code> 예약어를 사용해 선언</p>\n<ul>\n<li>상수로 선언한 변수 이름은 다 대문자로 적는게 일반적임</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> MAX_NUM <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>리터럴(literal)</strong></p>\n<ul>\n<li>프로그램에서 사용하는 모든 숫자, 문자, 논리값(true, false)</li>\n<li>프로그램이 시작할 때 같이 로딩되어 <strong>특정 메모리 공간인 상수 풀(constant pool)</strong>에 놓임 </li>\n<li>변수에 대입될 때 다시 변수 메모리에 복사됨</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">char</span> ch <span class=\"token operator\">=</span> <span class=\"token string\">'A'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">final</span> <span class=\"token keyword\">double</span> PI <span class=\"token operator\">=</span> <span class=\"token number\">3.14</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 여기서 'A', 10, 3.14 가 모두 리터럴이다</span></code></pre></div>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/Java/1.%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/#1-%EB%B3%80%EC%88%98%EC%99%80-%EC%9E%90%EB%A3%8C%ED%98%95\">1. 변수와 자료형</a></p>\n<ul>\n<li><a href=\"/Java/1.%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/#1-%EB%B3%80%EC%88%98-%EC%84%A0%EC%96%B8\">1) 변수 선언</a></li>\n<li>\n<p><a href=\"/Java/1.%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/#2-%EB%B3%80%EC%88%98%EC%9D%98-%EC%9E%90%EB%A3%8C%ED%98%95\">2) 변수의 자료형</a></p>\n<ul>\n<li><a href=\"/Java/1.%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/#1-%EA%B8%B0%EB%B3%B8-%EC%9E%90%EB%A3%8C%ED%98%95\">(1) 기본 자료형</a></li>\n<li><a href=\"/Java/1.%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/#2-%EC%B0%B8%EC%A1%B0-%EC%9E%90%EB%A3%8C%ED%98%95\">(2) 참조 자료형</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/Java/1.%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/#2-%ED%98%95-%EB%B3%80%ED%99%98-casting\">2. 형 변환 (Casting)</a></p>\n<ul>\n<li><a href=\"/Java/1.%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/#1-%EB%AC%B5%EC%8B%9C%EC%A0%81-%ED%98%95-%EB%B3%80%ED%99%98-upcasting\">1) 묵시적 형 변환 (Upcasting)</a></li>\n<li><a href=\"/Java/1.%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/#2-%EB%AA%85%EC%8B%9C%EC%A0%81-%ED%98%95-%EB%B3%80%ED%99%98-downcasting\">2) 명시적 형 변환 (Downcasting)</a></li>\n</ul>\n</li>\n<li><a href=\"/Java/1.%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/#3-%EC%83%81%EC%88%98%EC%99%80-%EB%A6%AC%ED%84%B0%EB%9F%B4\">3. 상수와 리터럴</a></li>\n</ul>","frontmatter":{"title":"[Java] 변수와 자료형","date":"July 29, 2021"}}},"pageContext":{"slug":"/Java/1.변수와 자료형/","previous":{"fields":{"slug":"/Algorithm/[프로그래머스] 주식가격/"},"frontmatter":{"title":"[프로그래머스] 주식가격 (파이썬)"}},"next":{"fields":{"slug":"/Java/2.클래스와-객체/"},"frontmatter":{"title":"[Java] 2. 클래스와 객체"}}}}}