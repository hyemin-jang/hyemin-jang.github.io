{"componentChunkName":"component---src-templates-blog-post-js","path":"/Java/4.상속과 다형성/","result":{"data":{"site":{"siteMetadata":{"title":"Hyem.log","author":"[hyem]","siteUrl":"https://hyemin-jang.github.io","comment":{"disqusShortName":"","utterances":"hyemin-jang/hyemin-jang.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"d2541905-c96e-545d-8c59-30b96a828682","excerpt":"자바 클래스를 만들 때, 클래스 간의 관계를 판단해보자. is a 관계 has a 관계 🚗 예1) 자동차 클래스  -  엔진 클래스, 바퀴 클래스 … : ‘자동차 has a 엔진’ 관계를 가지고 있다. → 엔진 클래스를 자동차 클래스의 멤버변수화 시키면 된다. 📱 예2)  휴대폰 클래스  - 아이폰 클래스, 안드로이드폰 클래스 … ‘아이폰 is a 휴대폰’ 이라는 관계를 가지고 있다. → is a…","html":"<p>자바 클래스를 만들 때, 클래스 간의 관계를 판단해보자.</p>\n<blockquote>\n<ul>\n<li>is a 관계</li>\n<li>has a 관계</li>\n</ul>\n</blockquote>\n<p>🚗 예1) 자동차 클래스  -  엔진 클래스, 바퀴 클래스 …</p>\n<p>: <strong>‘자동차 has a 엔진’</strong> 관계를 가지고 있다.</p>\n<p>→ 엔진 클래스를 자동차 클래스의 <strong>멤버변수화</strong> 시키면 된다.</p>\n<p>📱 예2)  휴대폰 클래스  - 아이폰 클래스, 안드로이드폰 클래스 …</p>\n<p><strong>‘아이폰 is a 휴대폰’</strong> 이라는 관계를 가지고 있다.</p>\n<p>→ is a 관계를 가지고 있으면 <strong>상속 관계</strong>를 만들어서 상속의 이점을 누릴 수 있다.</p>\n<br>\n<h2 id=\"상속-inheritance\" style=\"position:relative;\"><a href=\"#%EC%83%81%EC%86%8D-inheritance\" aria-label=\"상속 inheritance permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>상속 (Inheritance)</h2>\n<ul>\n<li>‘물려받는다’는 의미</li>\n<li>B클래스가 A클래스를 상속받으면, B클래스는 A클래스가 가지고 있는 구성원(멤버변수, 메서드) 사용할 수 있음</li>\n<li>⚡ 자바에서는 모든 클래스가 다른 클래스를 상속받는데, 그 최초의 부모클래스는 <code class=\"language-text\">Object</code> 클래스이다 ⚡</li>\n</ul>\n<h3 id=\"1-상속관계의-클래스-생성\" style=\"position:relative;\"><a href=\"#1-%EC%83%81%EC%86%8D%EA%B4%80%EA%B3%84%EC%9D%98-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%83%9D%EC%84%B1\" aria-label=\"1 상속관계의 클래스 생성 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) 상속관계의 클래스 생성</h3>\n<p>문법:\n<code class=\"language-text\">class B</code> <code class=\"language-text\">extends</code> <code class=\"language-text\">A</code> <code class=\"language-text\">{ ... }</code></p>\n<br>\n<p>🎈 고객 정보를 관리하는 ‘Customer’ 클래스가 있을 때, 이 클래스의 구성요소를 모두 포함하면서 새로운 속성과 기능을 가진 ‘VIPCustomer’ 클래스를 만들어보자.</p>\n<h3 id=\"protected-접근제한자\" style=\"position:relative;\"><a href=\"#protected-%EC%A0%91%EA%B7%BC%EC%A0%9C%ED%95%9C%EC%9E%90\" aria-label=\"protected 접근제한자 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>protected 접근제한자</h3>\n<ul>\n<li>부모클래스의 멤버변수를 private으로 선언하면 자식클래스에서 접근 불가능하다.</li>\n<li>상속관계의 클래스에서는 접근할 수 있도록 protected를 사용한다.\n<a href=\"https://hyemin-jang.github.io/Java/3.%EC%A0%91%EA%B7%BC%EC%A0%9C%ED%95%9C%EC%9E%90%EC%99%80%20&#x26;%20Static/\">(접근제한자 - 이전 포스팅 참고)</a></li>\n</ul>\n<p>&#x3C;Customer.java></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Customer</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">protected</span> <span class=\"token keyword\">int</span> customerID<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">protected</span> <span class=\"token class-name\">String</span> customerName<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">protected</span> <span class=\"token class-name\">String</span> customerGrade<span class=\"token punctuation\">;</span>\t\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>&#x3C;VIPCustomer.java></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">VIPCustomer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Customer</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// 자식클래스인 VIPCustomer 클래스만의 멤버변수</span>\n    <span class=\"token keyword\">double</span> saleRatio<span class=\"token punctuation\">;</span>  \t\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>&#x3C;CustomerTest.java></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomerTest</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">VIPCustomer</span> vc1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VIPCustomer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n    \t<span class=\"token comment\">/* VIPCustomer 클래스는 customerName 멤버변수가 없지만, \n         * Customer 클래스로부터 상속받았기 때문에 사용 가능\n         */</span>\n\t\tvc1<span class=\"token punctuation\">.</span>customerName <span class=\"token operator\">=</span> <span class=\"token string\">\"홍길동\"</span><span class=\"token punctuation\">;</span>  \n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>vc1<span class=\"token punctuation\">.</span>customerName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 홍길동\t\t</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"super\" style=\"position:relative;\"><a href=\"#super\" aria-label=\"super permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>super()</h3>\n<ul>\n<li>부모클래스의 참조값을 가지고 있는 예약어. 자식클래스에서 부모클래스로 접근할 때 사용</li>\n<li>명시하지 않아도 <strong>자식클래스 생성자에서 super()를 자동 호출함</strong> </li>\n<li>super()를 호출하면 부모클래스의 <strong>디폴트 생성자가 호출됨</strong>\n= ⚡ <strong>자식클래스의 객체가 만들어질때 무조건 부모클래스 객체가 먼저 만들어짐</strong> ⚡\n: 자식클래스가 부모클래스의 멤버변수와 메서드를 사용할 수 있는 이유!! </li>\n</ul>\n<p>부모클래스인 Customer 클래스에 아래와 같이 생성자를 구현했을 때,</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Customer</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">protected</span> <span class=\"token keyword\">int</span> customerID<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">protected</span> <span class=\"token class-name\">String</span> customerName<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">protected</span> <span class=\"token class-name\">String</span> customerGrade<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\">// 생성자를 직접 구현 ( => 디폴트 생성자 안만들어짐)</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Customer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> customerID<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> customerName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>customerID <span class=\"token operator\">=</span> customerID<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>customerName <span class=\"token operator\">=</span> customerName<span class=\"token punctuation\">;</span>\n\t\tcustomerGrade <span class=\"token operator\">=</span> <span class=\"token string\">\"Silver\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>VIPCustomer.java에서는 오류가 발생한다.\nVIPCustomer 클래스의 생성자를 명시하지 않았기 때문에, 컴파일시에 디폴트생성자와 그 안에 super()가 자동 생성된다.</p>\n<p>super()가 부모클래스의 디폴트생성자를 호출해야 하는데, Customer클래스에는 디폴트생성자가 없어 오류가 발생하는 것이다.</p>\n<p>아래와 같이 VIPCustomer 클래스의 생성자와 super()를 명시해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">VIPCustomer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Customer</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">double</span> saleRatio<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">VIPCustomer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> customerID<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> customerName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>customerID<span class=\"token punctuation\">,</span> customerName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 부모클래스의 생성자 호출</span>\n\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span>customerGrade <span class=\"token operator\">=</span> <span class=\"token string\">\"VIP\"</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 부모클래스의 멤버변수 참조</span>\n\t\tsaleRatio <span class=\"token operator\">=</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> \t\t\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<h3 id=\"2-메서드-오버라이딩-method-overriding\" style=\"position:relative;\"><a href=\"#2-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%94%A9-method-overriding\" aria-label=\"2 메서드 오버라이딩 method overriding permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2) 메서드 오버라이딩 (Method Overriding)</h3>\n<ul>\n<li>부모클래스의 메서드를 자식클래스에서 <strong>재정의</strong></li>\n<li>메서드의 반환형, 이름, 매개변수 개수/자료형이 모두 같아야 함\n(그렇지 않으면 다른 메서드로 인식됨)</li>\n</ul>\n<p>&#x3C;Customer.java></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Customer</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">protected</span> <span class=\"token keyword\">int</span> customerID<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">protected</span> <span class=\"token class-name\">String</span> customerName<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">protected</span> <span class=\"token class-name\">String</span> customerGrade<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Customer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> customerID<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> customerName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>customerID <span class=\"token operator\">=</span> customerID<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>customerName <span class=\"token operator\">=</span> customerName<span class=\"token punctuation\">;</span>\n\t\tcustomerGrade <span class=\"token operator\">=</span> <span class=\"token string\">\"Silver\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n    <span class=\"token comment\">// 가격을 반환하는 메서드 </span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">calcPrice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> price<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> price<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n    \t\t\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>&#x3C;VIPCustomer.java></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">VIPCustomer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Customer</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">double</span> saleRatio<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">VIPCustomer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> customerID<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> customerName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>customerID<span class=\"token punctuation\">,</span> customerName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span>customerGrade <span class=\"token operator\">=</span> <span class=\"token string\">\"VIP\"</span><span class=\"token punctuation\">;</span>\n\t\tsaleRatio <span class=\"token operator\">=</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// 메소드 오버라이딩</span>\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">calcPrice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> price<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> price <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>saleRatio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// VIPCustomer 클래스에 맞게 재정의해서 사용</span>\n\t<span class=\"token punctuation\">}</span> \t\t\n\t\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<h2 id=\"다형성-polymorphism\" style=\"position:relative;\"><a href=\"#%EB%8B%A4%ED%98%95%EC%84%B1-polymorphism\" aria-label=\"다형성 polymorphism permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>다형성 (Polymorphism)</h2>\n<ul>\n<li>하나의 코드가 <strong>여러 자료형으로 구현되어 실행되는 것</strong>을 뜻함</li>\n<li>필요에 따라 상속받은 모든 클래스를 하나의 상위 클래스로 처리하거나, 다형성에 의해 각 자식클래스의 구현을 실행할 수 있음</li>\n</ul>\n<h3 id=\"1-묵시적-클래스-형변환\" style=\"position:relative;\"><a href=\"#1-%EB%AC%B5%EC%8B%9C%EC%A0%81-%ED%81%B4%EB%9E%98%EC%8A%A4-%ED%98%95%EB%B3%80%ED%99%98\" aria-label=\"1 묵시적 클래스 형변환 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) 묵시적 클래스 형변환</h3>\n<ul>\n<li>\n<p>자식클래스로 객체를 생성할 때, <strong>그 객체를 참조하는 변수의 자료형을 부모클래스로 형변환</strong>하여 사용할 수 있다.\n<code class=\"language-text\">Customer vc = new VIPCustomer();</code></p>\n<ul>\n<li>덜 정밀한 자료형 → 더 정밀한 자료형으로의 형변환 = Upcasting\n<a href=\"https://hyemin-jang.github.io/Java/1.%EB%B3%80%EC%88%98%EC%99%80%20%EC%9E%90%EB%A3%8C%ED%98%95/\">(형변환 - 이전 포스팅 참고)</a></li>\n<li>VIPCustomer는 Customer클래스가 가지고 있는 구성원들을 모두 가지고 있기 때문에 묵시적 Upcasting 가능</li>\n</ul>\n</li>\n<li>선언한 클래스형에 기반하여 멤버변수/메서드에 접근할 수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomerTest</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">Customer</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Customer</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"장보리\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">VIPCustomer</span> v <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VIPCustomer</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"서리태\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\n\t\t<span class=\"token comment\">// 묵시적 형변환\t</span>\n\t\t<span class=\"token class-name\">Customer</span> vc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VIPCustomer</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"김키위\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>saleRatio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 0.1\t</span>\n\t\t\n\t\t<span class=\"token comment\">// System.out.println(vc.saleRatio);   </span>\n\t\t<span class=\"token comment\">// => vc는 Customer 클래스를 참조하는 변수임</span>\n\t\t<span class=\"token comment\">// VIPCustomer 클래스만 가지고 있는 saleRatio 변수에 접근 불가</span>\n\t<span class=\"token punctuation\">}</span>\n    \n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<h3 id=\"2-가상메서드\" style=\"position:relative;\"><a href=\"#2-%EA%B0%80%EC%83%81%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"2 가상메서드 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2) 가상메서드</h3>\n<ul>\n<li>\n<p><code class=\"language-text\">변수</code>와 <code class=\"language-text\">메서드</code>가 사용하는 메모리는 다르다.</p>\n<ul>\n<li>멤버변수 : 인스턴스가 생성될 때마다 <code class=\"language-text\">스택 메모리</code>에 생성됨</li>\n<li>메서드 : 메모리상의 <code class=\"language-text\">메서드 영역</code>에 생성됨\n(멤버변수처럼 인스턴스가 생성될때마다 새로 생성되지 않음)</li>\n</ul>\n</li>\n<li>메서드를 호출하면 메서드 영역의 주소를 참조하여 명령이 실행된다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomerTest</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">Customer</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Customer</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"장보리\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">VIPCustomer</span> v <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VIPCustomer</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"서리태\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\n\t\t<span class=\"token class-name\">Customer</span> vc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VIPCustomer</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"김키위\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \t\t\n\t\t\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">calcPrice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 1000.0</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">calcPrice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 900.0</span>\n\t\t<span class=\"token comment\">// 가상메서드 </span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>vc<span class=\"token punctuation\">.</span><span class=\"token function\">calcPrice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 900.0</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>vc 변수의 자료형은 Customer형이고, 생성된 인스턴스는 VIPCustomer이다.</li>\n<li>⚡ <strong>선언한 클래스형이 아닌, 생성된 인스턴스의 메서드를 호출</strong>한다. ⚡</li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/Java/4.%EC%83%81%EC%86%8D%EA%B3%BC%20%EB%8B%A4%ED%98%95%EC%84%B1/#%EC%83%81%EC%86%8D-inheritance\">상속 (Inheritance)</a></p>\n<ul>\n<li><a href=\"/Java/4.%EC%83%81%EC%86%8D%EA%B3%BC%20%EB%8B%A4%ED%98%95%EC%84%B1/#1-%EC%83%81%EC%86%8D%EA%B4%80%EA%B3%84%EC%9D%98-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%83%9D%EC%84%B1\">1) 상속관계의 클래스 생성</a></li>\n<li><a href=\"/Java/4.%EC%83%81%EC%86%8D%EA%B3%BC%20%EB%8B%A4%ED%98%95%EC%84%B1/#protected-%EC%A0%91%EA%B7%BC%EC%A0%9C%ED%95%9C%EC%9E%90\">protected 접근제한자</a></li>\n<li><a href=\"/Java/4.%EC%83%81%EC%86%8D%EA%B3%BC%20%EB%8B%A4%ED%98%95%EC%84%B1/#super\">super()</a></li>\n<li><a href=\"/Java/4.%EC%83%81%EC%86%8D%EA%B3%BC%20%EB%8B%A4%ED%98%95%EC%84%B1/#2-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%94%A9-method-overriding\">2) 메서드 오버라이딩 (Method Overriding)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/Java/4.%EC%83%81%EC%86%8D%EA%B3%BC%20%EB%8B%A4%ED%98%95%EC%84%B1/#%EB%8B%A4%ED%98%95%EC%84%B1-polymorphism\">다형성 (Polymorphism)</a></p>\n<ul>\n<li><a href=\"/Java/4.%EC%83%81%EC%86%8D%EA%B3%BC%20%EB%8B%A4%ED%98%95%EC%84%B1/#1-%EB%AC%B5%EC%8B%9C%EC%A0%81-%ED%81%B4%EB%9E%98%EC%8A%A4-%ED%98%95%EB%B3%80%ED%99%98\">1) 묵시적 클래스 형변환</a></li>\n<li><a href=\"/Java/4.%EC%83%81%EC%86%8D%EA%B3%BC%20%EB%8B%A4%ED%98%95%EC%84%B1/#2-%EA%B0%80%EC%83%81%EB%A9%94%EC%84%9C%EB%93%9C\">2) 가상메서드</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"[Java] 상속과 다형성","date":"July 30, 2021"}}},"pageContext":{"slug":"/Java/4.상속과 다형성/","previous":{"fields":{"slug":"/Java/3.접근제한자와 & Static/"},"frontmatter":{"title":"[Java] 접근제한자와 정보 은닉 & Static"}},"next":{"fields":{"slug":"/Algorithm/완전탐색,이분탐색/"},"frontmatter":{"title":"[Algorithm] 완전탐색/이분탐색"}}}}}