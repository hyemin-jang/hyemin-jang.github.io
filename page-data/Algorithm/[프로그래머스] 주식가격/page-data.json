{"componentChunkName":"component---src-templates-blog-post-js","path":"/Algorithm/[프로그래머스] 주식가격/","result":{"data":{"site":{"siteMetadata":{"title":"Hyem.log","author":"[hyem]","siteUrl":"https://hyemin-jang.github.io","comment":{"disqusShortName":"","utterances":"hyemin-jang/hyemin-jang.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"f04c58e6-b16f-5b11-9960-666fcce407f7","excerpt":"문제 문제 설명 초 단위로 기록된 주식가격이 담긴 배열 prices가 매개변수로 주어질 때, 가격이 떨어지지 않은 기간은 몇 초인지를 return 하도록 solution 함수를 완성하세요. 제한사항 prices의 각 가격은 1 이상 10,000 이하인 자연수입니다. prices의 길이는 2 이상 100,000 이하입니다. 입출력 예 prices return 1, 2, 3, 2, 3 4, 3, 1, 1, 0 입출력 예 설명 1초 시점의 ₩1은 끝까지 가격이 떨어지지 않았습니다. 2초 시점의 ₩…","html":"<h2 id=\"문제\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C\" aria-label=\"문제 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제</h2>\n<p><strong>문제 설명</strong></p>\n<p>초 단위로 기록된 주식가격이 담긴 배열 prices가 매개변수로 주어질 때, 가격이 떨어지지 않은 기간은 몇 초인지를 return 하도록 solution 함수를 완성하세요.</p>\n<p><strong>제한사항</strong></p>\n<p>prices의 각 가격은 1 이상 10,000 이하인 자연수입니다.<br>\nprices의 길이는 2 이상 100,000 이하입니다.</p>\n<p><strong>입출력 예</strong></p>\n<table>\n<thead>\n<tr>\n<th>prices</th>\n<th>return</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[1, 2, 3, 2, 3]</td>\n<td>[4, 3, 1, 1, 0]</td>\n</tr>\n</tbody>\n</table>\n<p><strong>입출력 예 설명</strong></p>\n<p>1초 시점의 ₩1은 끝까지 가격이 떨어지지 않았습니다.<br>\n2초 시점의 ₩2은 끝까지 가격이 떨어지지 않았습니다.<br>\n3초 시점의 ₩3은 1초뒤에 가격이 떨어집니다. 따라서 1초간 가격이 떨어지지 않은 것으로 봅니다.<br>\n4초 시점의 ₩2은 1초간 가격이 떨어지지 않았습니다.<br>\n5초 시점의 ₩3은 0초간 가격이 떨어지지 않았습니다.  </p>\n<h2 id=\"풀이과정--완성코드\" style=\"position:relative;\"><a href=\"#%ED%92%80%EC%9D%B4%EA%B3%BC%EC%A0%95--%EC%99%84%EC%84%B1%EC%BD%94%EB%93%9C\" aria-label=\"풀이과정  완성코드 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>풀이과정 &#x26; 완성코드</h2>\n<p>이 문제 역시 스택/큐를 활용할 풀이가 생각 안나서.. 완전탐색처럼 풀어봤는데 입력값이 크지 않아서 통과를 하긴 했다.</p>\n<p>prices 리스트의 각 원소에 대해, 그 다음 값들을 쭉쭉 비교하면서 sec += 1 해주다가, 더 작은 값이 나오면 while 반복문 종료해준다.</p>\n<p>여기서 헷갈렸던 점이 1초 뒤에 바로 가격이 떨어져도 1초동안은 가격이 떨어지지 않은 것으로 본다는 점이었다.\n그래서 리스트의 끝까지 비교해서 while문이 종료된게 아니라, 뒤에 작은값이 나와서 while문이 끝난 경우, sec에 한번더 +=1 해주었다.</p>\n<p>완성코드 :</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>prices<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    answer <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>prices<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        j <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span>\n        sec <span class=\"token operator\">=</span> <span class=\"token number\">0</span>  <span class=\"token comment\"># 가격이 몇초간 떨어지지 않는지 담을 변수</span>\n        <span class=\"token keyword\">while</span> j <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>prices<span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> prices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> prices<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            sec <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            j <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">if</span> j <span class=\"token operator\">!=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>prices<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            sec <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        answer<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>sec<span class=\"token punctuation\">)</span>\n    answer<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 마지막 원소는 비교할 대상이 없으므로 무조건 0</span>\n    <span class=\"token keyword\">return</span> answer</code></pre></div>\n<h2 id=\"다른-풀이\" style=\"position:relative;\"><a href=\"#%EB%8B%A4%EB%A5%B8-%ED%92%80%EC%9D%B4\" aria-label=\"다른 풀이 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>다른 풀이</h2>\n<p> 위의 코드는 반복문을 2번 돌리기 때문에 O(n^2)이다. 더 효율적으로 풀 방법은 없을까?</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> deque\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>prices<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n   answer <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n   prices <span class=\"token operator\">=</span> deque<span class=\"token punctuation\">(</span>prices<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">while</span> prices<span class=\"token punctuation\">:</span>\n       target <span class=\"token operator\">=</span> prices<span class=\"token punctuation\">.</span>popleft<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 각 가격</span>\n\n       sec <span class=\"token operator\">=</span> <span class=\"token number\">0</span>  <span class=\"token comment\"># 가격이 몇초간 떨어지지 않는지 담을 변수 </span>\n       <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> prices<span class=\"token punctuation\">:</span>\n           <span class=\"token keyword\">if</span> target <span class=\"token operator\">></span> i<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 현 가격보다 떨어진 가격이 있으면 break</span>\n               sec <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>  <span class=\"token comment\"># 바로 떨어지면 1초동안 유지된 것으로 본다</span>\n               <span class=\"token keyword\">break</span>\n           sec <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>  \n\n       answer<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>sec<span class=\"token punctuation\">)</span>\n\n   <span class=\"token keyword\">return</span> answer</code></pre></div>\n<p>큐를 사용해서 O(n)으로 풀 수 있었다.<br>\n<strong>리스트 내에 있는 첫 원소부터 순서대로 뭔가 계산/처리를 해봐야 하는 경우</strong> 큐를 사용해서 하나씩 없애가면서 풀어보면 될 것 같다… (라고 정답코드를 보고 나면 말할수야 있지만 떠올리기가 너무 어렵다구…)</p>","tableOfContents":"<ul>\n<li><a href=\"/Algorithm/%5B%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4%5D%20%EC%A3%BC%EC%8B%9D%EA%B0%80%EA%B2%A9/#%EB%AC%B8%EC%A0%9C\">문제</a></li>\n<li><a href=\"/Algorithm/%5B%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4%5D%20%EC%A3%BC%EC%8B%9D%EA%B0%80%EA%B2%A9/#%ED%92%80%EC%9D%B4%EA%B3%BC%EC%A0%95--%EC%99%84%EC%84%B1%EC%BD%94%EB%93%9C\">풀이과정 &#x26; 완성코드</a></li>\n<li><a href=\"/Algorithm/%5B%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4%5D%20%EC%A3%BC%EC%8B%9D%EA%B0%80%EA%B2%A9/#%EB%8B%A4%EB%A5%B8-%ED%92%80%EC%9D%B4\">다른 풀이</a></li>\n</ul>","frontmatter":{"title":"[프로그래머스] 주식가격 (파이썬)","date":"July 27, 2021"}}},"pageContext":{"slug":"/Algorithm/[프로그래머스] 주식가격/","previous":{"fields":{"slug":"/Algorithm/[프로그래머스] 기능개발/"},"frontmatter":{"title":"[프로그래머스] 기능개발 (파이썬)"}},"next":{"fields":{"slug":"/Java/1.변수와 자료형/"},"frontmatter":{"title":"[Java] 변수와 자료형"}}}}}