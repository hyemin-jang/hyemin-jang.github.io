{"componentChunkName":"component---src-templates-blog-post-js","path":"/Algorithm/스택, 큐/","result":{"data":{"site":{"siteMetadata":{"title":"Hyem.log","author":"[hyem]","siteUrl":"https://hyemin-jang.github.io","comment":{"disqusShortName":"","utterances":"hyemin-jang/hyemin-jang.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"155da5b4-994e-5bf3-858e-d9aa65489989","excerpt":"1. 스택(Stack) ‘쌓는다’는 의미.\n하나의 리스트에 대해 한쪽 방향에서만 접근이 가능한 구조.\nLIFO (Last-In, First-Out) 가 기본원리 1) 스택의 구조  : 새로운 데이터를 리스트의 가장 마지막 데이터 뒤에 넣음  : 가장 마지막 데이터가 무엇인지 확인함  : 가장 마지막 데이터를 꺼냄 2) 스택 구현하기 직접 구현 List를 스택으로 구현 push s.append(1)\ns.append(2)\ns.append(3) print(s)  # 1,2,3 pop print(s…","html":"<h1 id=\"1-스택stack\" style=\"position:relative;\"><a href=\"#1-%EC%8A%A4%ED%83%9Dstack\" aria-label=\"1 스택stack permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 스택(Stack)</h1>\n<blockquote>\n<p>‘쌓는다’는 의미.\n하나의 리스트에 대해 한쪽 방향에서만 접근이 가능한 구조.\nLIFO (Last-In, First-Out) 가 기본원리</p>\n</blockquote>\n<h2 id=\"1-스택의-구조\" style=\"position:relative;\"><a href=\"#1-%EC%8A%A4%ED%83%9D%EC%9D%98-%EA%B5%AC%EC%A1%B0\" aria-label=\"1 스택의 구조 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) 스택의 구조</h2>\n<ul>\n<li><code class=\"language-text\">push</code> : 새로운 데이터를 리스트의 가장 마지막 데이터 뒤에 넣음</li>\n<li><code class=\"language-text\">peek</code> : 가장 마지막 데이터가 무엇인지 확인함</li>\n<li><code class=\"language-text\">pop</code> : 가장 마지막 데이터를 꺼냄</li>\n</ul>\n<h2 id=\"2-스택-구현하기\" style=\"position:relative;\"><a href=\"#2-%EC%8A%A4%ED%83%9D-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0\" aria-label=\"2 스택 구현하기 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2) 스택 구현하기</h2>\n<ol>\n<li>\n<p>직접 구현</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Stack</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token comment\"># push</span>\npush <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">.</span>append\n\n<span class=\"token comment\"># peek</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">peek</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">return</span> self<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># pop은 원래 list의 내장함수라서 따로 구현하지 않음</span></code></pre></div>\n</li>\n<li>\n<p>List를 스택으로 구현</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">s <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></code></pre></div>\n</li>\n</ol>\n<h1 id=\"push\" style=\"position:relative;\"><a href=\"#push\" aria-label=\"push permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>push</h1>\n<p>s.append(1)\ns.append(2)\ns.append(3)</p>\n<p>print(s)  # [1,2,3]</p>\n<h1 id=\"pop\" style=\"position:relative;\"><a href=\"#pop\" aria-label=\"pop permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>pop</h1>\n<p>print(s.pop())  # 3\nprint(s)  # [1,2]</p>\n<h1 id=\"peek\" style=\"position:relative;\"><a href=\"#peek\" aria-label=\"peek permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>peek</h1>\n<p>print(s[-1])  # 2\nprint(s)  # [1,2]</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">## 3) 스택의 활용\n\n- 웹브라우저에서 이전 페이지 / 다음 페이지\n\n- 깊이우선탐색(DFS)\n\n  ​\t  \n\n---------------------------\n\n# 2. 큐 (Queue)\n&gt; &#39;일이 처리되기를 기다리는 리스트&#39;라는 의미.\n&gt; 하나의 리스트에 양쪽에서 접근이 가능한 구조.\n&gt; FIFO (First-In, First-Out) 가 기본원리.\n\n_먼저 줄선 사람이 먼저 입장하는 걸 상상하자_\n\n## 1) 큐의 구조\n- `put` : 새로운 데이터를 리스트의 가장 마지막 데이터 뒤에 넣음\n- `peek` : **가장 먼저 들어간 데이터**가 무엇인지 확인\n- `get` : **가장 먼저 들어간 데이터**를 꺼냄\n\n## 2) 큐 구현\n1. 직접 구현\n```python\nclass Queue(list):\n    # put\n    put = list.append\n    \n    # peek\n    def peek(self):\n    \treturn self[0]\n    \n    # get\n    def get(self):\n    \treturn self.pop(0)</code></pre></div>\n<ol start=\"2\">\n<li>\n<p>이미 구현된 클래스 import</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> queue <span class=\"token keyword\">import</span> Queue</code></pre></div>\n</li>\n</ol>\n<p>q = Queue()</p>\n<h1 id=\"put\" style=\"position:relative;\"><a href=\"#put\" aria-label=\"put permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>put</h1>\n<p>q.put(1)\nq.put(2)\nq.put(3)\nprint(q)  # [1,2,3]</p>\n<h1 id=\"get\" style=\"position:relative;\"><a href=\"#get\" aria-label=\"get permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>get</h1>\n<p>print(q.get())  # 1\nprint(q)  # [2,3]</p>\n<h1 id=\"peek-1\" style=\"position:relative;\"><a href=\"#peek-1\" aria-label=\"peek 1 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>peek</h1>\n<p>print(q.peek())  # 2\nprint(q)  # [2,3]</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">3. List를 큐로 활용\n```python\nq = []\n\n# put\nq.append(1)\nq.append(2)\nq.append(3)\nprint(q)  # [1,2,3]\n\n# get\nprint(q.pop(0))  # 1\nprint(q)  # [2,3]\n\n# peek\nprint(q[0])  # 2\nprint(q)  # [2,3]</code></pre></div>\n<h2 id=\"3-큐의-활용\" style=\"position:relative;\"><a href=\"#3-%ED%81%90%EC%9D%98-%ED%99%9C%EC%9A%A9\" aria-label=\"3 큐의 활용 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3) 큐의 활용</h2>\n<ul>\n<li>프린터 인쇄 대기열</li>\n<li>\n<p>너비우선탐색(BFS)</p>\n<p>​\t  </p>\n</li>\n</ul>\n<hr>\n<h1 id=\"3-데크-deque\" style=\"position:relative;\"><a href=\"#3-%EB%8D%B0%ED%81%AC-deque\" aria-label=\"3 데크 deque permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 데크 (Deque)</h1>\n<blockquote>\n<p><strong>양쪽에서 모두 데이터를 처리할 수 있는</strong> 자료형.\n양방향이기 때문에 리스트보다 출입 연산이 더 효율적이다.</p>\n</blockquote>\n<h2 id=\"1-데크-구현\" style=\"position:relative;\"><a href=\"#1-%EB%8D%B0%ED%81%AC-%EA%B5%AC%ED%98%84\" aria-label=\"1 데크 구현 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) 데크 구현</h2>\n<ol>\n<li>\n<p>파이썬 모듈 import</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> deque</code></pre></div>\n</li>\n</ol>\n<p>d = deque()</p>\n<p>d.append(1)\nd.append(2)\nd.append(3)\nprint(d)  # [1,2,3]</p>\n<p>d.appendleft(4)\nd.appendleft(5)\nprint(d)  # [4,5,1,2,3]</p>\n<p>print(d.pop())  # 3\nprint(d)  # [4,5,1,2]</p>\n<p>print(d.popleft())  # 4\nprint(d)  # [5,1,2]</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">문제 풀 때 큐를 리스트로 사용하는 것보다 deque로 사용하는 것이 효율적이다. \n- 리스트에서 get 메서드를 구현하기 위해 pop(0)을 사용시 시간복잡도는 O(n)이다. 맨 앞 데이터를 추출하고 빈 자리에 모든 데이터들을 한칸씩 앞으로 당겨야 하기 때문이다.\n- 반면 deque의 popleft() 메서드를 사용하면 시간복잡도는 O(1)이다. \n\n\n## 2) deque 활용 문제\n1. 리스트트를 n만큼 회전시키기\na = [1,2,3,4,5] 일 때, 이 리스트를 2만큼 오른쪽으로 회전시켜 [4,5,1,2,3] 으로 만들기\n\n```python\nfrom collections import deque\n\na = [1,2,3,4,5]\nq = deque(a)\nq.rotate(2)\nresult = list(q)\nprint(result)  # [4,5,1,2,3]</code></pre></div>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/Algorithm/%EC%8A%A4%ED%83%9D,%20%ED%81%90/#1-%EC%8A%A4%ED%83%9Dstack\">1. 스택(Stack)</a></p>\n<ul>\n<li><a href=\"/Algorithm/%EC%8A%A4%ED%83%9D,%20%ED%81%90/#1-%EC%8A%A4%ED%83%9D%EC%9D%98-%EA%B5%AC%EC%A1%B0\">1) 스택의 구조</a></li>\n<li><a href=\"/Algorithm/%EC%8A%A4%ED%83%9D,%20%ED%81%90/#2-%EC%8A%A4%ED%83%9D-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0\">2) 스택 구현하기</a></li>\n</ul>\n</li>\n<li><a href=\"/Algorithm/%EC%8A%A4%ED%83%9D,%20%ED%81%90/#push\">push</a></li>\n<li><a href=\"/Algorithm/%EC%8A%A4%ED%83%9D,%20%ED%81%90/#pop\">pop</a></li>\n<li><a href=\"/Algorithm/%EC%8A%A4%ED%83%9D,%20%ED%81%90/#peek\">peek</a></li>\n<li><a href=\"/Algorithm/%EC%8A%A4%ED%83%9D,%20%ED%81%90/#put\">put</a></li>\n<li><a href=\"/Algorithm/%EC%8A%A4%ED%83%9D,%20%ED%81%90/#get\">get</a></li>\n<li>\n<p><a href=\"/Algorithm/%EC%8A%A4%ED%83%9D,%20%ED%81%90/#peek-1\">peek</a></p>\n<ul>\n<li><a href=\"/Algorithm/%EC%8A%A4%ED%83%9D,%20%ED%81%90/#3-%ED%81%90%EC%9D%98-%ED%99%9C%EC%9A%A9\">3) 큐의 활용</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/Algorithm/%EC%8A%A4%ED%83%9D,%20%ED%81%90/#3-%EB%8D%B0%ED%81%AC-deque\">3. 데크 (Deque)</a></p>\n<ul>\n<li><a href=\"/Algorithm/%EC%8A%A4%ED%83%9D,%20%ED%81%90/#1-%EB%8D%B0%ED%81%AC-%EA%B5%AC%ED%98%84\">1) 데크 구현</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"[Algorithm] 스택, 큐","date":"July 26, 2021"}}},"pageContext":{"slug":"/Algorithm/스택, 큐/","previous":null,"next":{"fields":{"slug":"/Algorithm/[프로그래머스] 기능개발/"},"frontmatter":{"title":"[프로그래머스] 기능개발 (파이썬)"}}}}}