{"componentChunkName":"component---src-templates-blog-post-js","path":"/Algorithm/스택, 큐/","result":{"data":{"site":{"siteMetadata":{"title":"Hyem.log","author":"[hyem]","siteUrl":"https://hyemin-jang.github.io","comment":{"disqusShortName":"","utterances":"hyemin-jang/hyemin-jang.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"155da5b4-994e-5bf3-858e-d9aa65489989","excerpt":"1. 스택(Stack) ‘쌓는다’는 의미.\n하나의 리스트에 대해 한쪽 방향에서만 접근이 가능한 구조.\nLIFO (Last-In, First-Out) 가 기본원리 ✅ 스택의 구조  : 새로운 데이터를 리스트의 가장 마지막 데이터 뒤에 넣음  : 가장 마지막 데이터가 무엇인지 확인함  : 가장 마지막 데이터를 꺼냄 ​\t   ✅ 스택 구현하기 직접 구현 List를 스택으로 구현 ✅ 스택의 활용 웹브라우저에서 이전 페이지 / 다음 페이지 깊이우선탐색(DFS) 2. 큐 (Queue…","html":"<h1 id=\"1-스택stack\" style=\"position:relative;\"><a href=\"#1-%EC%8A%A4%ED%83%9Dstack\" aria-label=\"1 스택stack permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 스택(Stack)</h1>\n<blockquote>\n<p>‘쌓는다’는 의미.\n하나의 리스트에 대해 한쪽 방향에서만 접근이 가능한 구조.\nLIFO (Last-In, First-Out) 가 기본원리</p>\n</blockquote>\n<p>✅ <strong>스택의 구조</strong></p>\n<ul>\n<li><code class=\"language-text\">push</code> : 새로운 데이터를 리스트의 가장 마지막 데이터 뒤에 넣음</li>\n<li><code class=\"language-text\">peek</code> : 가장 마지막 데이터가 무엇인지 확인함</li>\n<li>\n<p><code class=\"language-text\">pop</code> : 가장 마지막 데이터를 꺼냄</p>\n<p>​\t  </p>\n</li>\n</ul>\n<p>✅ <strong>스택 구현하기</strong></p>\n<ol>\n<li>\n<p>직접 구현</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Stack</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token comment\"># push</span>\npush <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">.</span>append\n\n<span class=\"token comment\"># peek</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">peek</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">return</span> self<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># pop은 원래 list의 내장함수라서 따로 구현하지 않음</span></code></pre></div>\n</li>\n<li>\n<p>List를 스택으로 구현</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">s <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># push</span>\ns<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\ns<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\ns<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [1,2,3]</span>\n\n<span class=\"token comment\"># pop</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 3</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [1,2]</span>\n\n<span class=\"token comment\"># peek</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 2</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [1,2]</span></code></pre></div>\n</li>\n</ol>\n<p>✅ <strong>스택의 활용</strong></p>\n<ul>\n<li>웹브라우저에서 이전 페이지 / 다음 페이지</li>\n<li>깊이우선탐색(DFS)</li>\n</ul>\n<hr>\n<h1 id=\"2-큐-queue\" style=\"position:relative;\"><a href=\"#2-%ED%81%90-queue\" aria-label=\"2 큐 queue permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 큐 (Queue)</h1>\n<blockquote>\n<p>‘일이 처리되기를 기다리는 리스트’라는 의미.\n하나의 리스트에 양쪽에서 접근이 가능한 구조.\nFIFO (First-In, First-Out) 가 기본원리.</p>\n</blockquote>\n<p><em>먼저 줄선 사람이 먼저 입장하는 걸 상상하자</em></p>\n<p>✅ <strong>큐의 구조</strong> </p>\n<ul>\n<li><code class=\"language-text\">put</code> : 새로운 데이터를 리스트의 가장 마지막 데이터 뒤에 넣음</li>\n<li><code class=\"language-text\">peek</code> : <strong>가장 먼저 들어간 데이터</strong>가 무엇인지 확인</li>\n<li>\n<p><code class=\"language-text\">get</code> : <strong>가장 먼저 들어간 데이터</strong>를 꺼냄</p>\n<p>​\t</p>\n</li>\n</ul>\n<p>✅ <strong>큐 구현</strong></p>\n<ol>\n<li>\n<p>직접 구현</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Queue</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token comment\"># put</span>\nput <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">.</span>append\n\n<span class=\"token comment\"># peek</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">peek</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">return</span> self<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># get</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p>이미 구현된 클래스 import</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> queue <span class=\"token keyword\">import</span> Queue\n\nq <span class=\"token operator\">=</span> Queue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># put</span>\nq<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nq<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nq<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [1,2,3]</span>\n\n<span class=\"token comment\"># get</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 1</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [2,3]</span>\n\n<span class=\"token comment\"># peek</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span>peek<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 2</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [2,3]</span></code></pre></div>\n</li>\n<li>\n<p>List를 큐로 활용</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">q <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># put</span>\nq<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nq<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nq<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [1,2,3]</span>\n\n<span class=\"token comment\"># get</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 1</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [2,3]</span>\n\n<span class=\"token comment\"># peek</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 2</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [2,3]</span></code></pre></div>\n</li>\n</ol>\n<p>✅ <strong>큐의 활용</strong></p>\n<ul>\n<li>프린터 인쇄 대기열</li>\n<li>너비우선탐색(BFS)</li>\n</ul>\n<hr>\n<h1 id=\"3-데크-deque\" style=\"position:relative;\"><a href=\"#3-%EB%8D%B0%ED%81%AC-deque\" aria-label=\"3 데크 deque permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 데크 (Deque)</h1>\n<blockquote>\n<p><strong>양쪽에서 모두 데이터를 처리할 수 있는</strong> 자료형.\n양방향이기 때문에 리스트보다 출입 연산이 더 효율적이다.</p>\n</blockquote>\n<p>✅ <strong>데크 구현</strong></p>\n<ol>\n<li>\n<p>파이썬 모듈 import</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> deque\n\nd <span class=\"token operator\">=</span> deque<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nd<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nd<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nd<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [1,2,3]</span>\n\nd<span class=\"token punctuation\">.</span>appendleft<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\nd<span class=\"token punctuation\">.</span>appendleft<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [4,5,1,2,3]</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 3</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [4,5,1,2]</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>popleft<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 4</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [5,1,2]</span></code></pre></div>\n</li>\n</ol>\n<p>문제 풀 때 큐를 리스트로 사용하는 것보다 deque로 사용하는 것이 효율적이다. </p>\n<p>리스트에서 get 메서드를 구현하기 위해 pop(0)을 사용시 시간복잡도는 O(n)이다. 맨 앞 데이터를 추출하고 빈 자리에 모든 데이터들을 한칸씩 앞으로 당겨야 하기 때문이다.</p>\n<p>반면 deque의 popleft() 메서드를 사용하면 시간복잡도는 O(1)이다. </p>\n<p>✅ <strong>deque 활용 문제</strong></p>\n<ul>\n<li>\n<p>리스트트를 n만큼 회전시키기</p>\n<ul>\n<li>a = [1,2,3,4,5] 일 때, 이 리스트를 2만큼 오른쪽으로 회전시켜 [4,5,1,2,3] 으로 만들기</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> deque\n\na <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\nq <span class=\"token operator\">=</span> deque<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\nq<span class=\"token punctuation\">.</span>rotate<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nresult <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># [4,5,1,2,3]</span></code></pre></div>\n</li>\n</ul>","tableOfContents":"<ul>\n<li><a href=\"/Algorithm/%EC%8A%A4%ED%83%9D,%20%ED%81%90/#1-%EC%8A%A4%ED%83%9Dstack\">1. 스택(Stack)</a></li>\n<li><a href=\"/Algorithm/%EC%8A%A4%ED%83%9D,%20%ED%81%90/#2-%ED%81%90-queue\">2. 큐 (Queue)</a></li>\n<li><a href=\"/Algorithm/%EC%8A%A4%ED%83%9D,%20%ED%81%90/#3-%EB%8D%B0%ED%81%AC-deque\">3. 데크 (Deque)</a></li>\n</ul>","frontmatter":{"title":"[Algorithm] 스택, 큐","date":"July 26, 2021"}}},"pageContext":{"slug":"/Algorithm/스택, 큐/","previous":null,"next":{"fields":{"slug":"/Algorithm/[프로그래머스] 기능개발/"},"frontmatter":{"title":"[프로그래머스] 기능개발 (파이썬)"}}}}}