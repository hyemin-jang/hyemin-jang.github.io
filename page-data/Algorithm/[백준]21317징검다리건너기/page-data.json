{"componentChunkName":"component---src-templates-blog-post-js","path":"/Algorithm/[백준]21317징검다리건너기/","result":{"data":{"site":{"siteMetadata":{"title":"Hyem.log","author":"[hyem]","siteUrl":"https://hyemin-jang.github.io","comment":{"disqusShortName":"","utterances":"hyemin-jang/hyemin-jang.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"8a994943-7b5a-5418-9a3f-5be0711725c5","excerpt":"문제 문제 링크 풀이 백준 다이나믹 프로그래밍 문제집에 있는 문제인데, 재귀함수를 사용해서 풀었다! 현 위치에서 가능한 선택지가 1) 작은 점프 뛰기  2) 큰 점프 뛰기  3) 매우 큰 점프 뛰기  => 3가지이므로,  재귀함수 3번 실행을 통해 현 위치 i 마다 3번의 경우를 모두 탐색해나가는 식으로 풀었다. 처음에 문제를 똑바로 안 읽어서 놓쳤던 부분이 매우 큰 점프는 단 한 번의 기회만 주어진다는 조건이었는데, 이 부분은 매우 큰 점프를 뛰었느냐 아직 안뛰었느냐 하는 boolean…","html":"<h2 id=\"문제\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C\" aria-label=\"문제 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제</h2>\n<p><a href=\"https://www.acmicpc.net/problem/21317\">문제 링크</a></p>\n<h2 id=\"풀이\" style=\"position:relative;\"><a href=\"#%ED%92%80%EC%9D%B4\" aria-label=\"풀이 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>풀이</h2>\n<p>백준 다이나믹 프로그래밍 문제집에 있는 문제인데, 재귀함수를 사용해서 풀었다!</p>\n<p>현 위치에서 가능한 선택지가 1) 작은 점프 뛰기  2) 큰 점프 뛰기  3) 매우 큰 점프 뛰기  => 3가지이므로,  <strong>재귀함수 3번 실행</strong>을 통해 현 위치 i 마다 3번의 경우를 모두 탐색해나가는 식으로 풀었다.</p>\n<p>처음에 문제를 똑바로 안 읽어서 놓쳤던 부분이 <strong>매우 큰 점프는 단 한 번의 기회만 주어진다</strong>는 조건이었는데, 이 부분은 매우 큰 점프를 뛰었느냐 아직 안뛰었느냐 하는 boolean 변수를 하나 추가해줘서 해결했다.</p>\n<p>DP문제 중에 거의 처음으로 검색 없이 푼 문제라 넘나 뿌듯..</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">n <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsmall <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\nbig <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    a<span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    small<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n    big<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\nk <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">jump</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> energy<span class=\"token punctuation\">,</span> biggest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 재귀함수 종료조건 : 현위치 i가 n번 돌(인덱스상으로는 n-1)이면 result list에 지금까지 소비한 에너지 추가하고 종료</span>\n    <span class=\"token keyword\">if</span> i <span class=\"token operator\">==</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        result<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>energy<span class=\"token punctuation\">)</span>\n        \n    <span class=\"token comment\"># 재귀함수 본문    </span>\n    <span class=\"token keyword\">elif</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        jump<span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> energy<span class=\"token operator\">+</span>small<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> biggest<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 작은 점프 뛰는 경우</span>\n        jump<span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> energy<span class=\"token operator\">+</span>big<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> biggest<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 큰 점프 뛰는 경우</span>\n        <span class=\"token keyword\">if</span> biggest <span class=\"token operator\">==</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># (아직 매우 큰 점프 안 뛰었을때만) 매우 큰 점프 뛰는 경우</span>\n            jump<span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> energy<span class=\"token operator\">+</span>k<span class=\"token punctuation\">,</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n\nresult <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\njump<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># n번 돌에 도달하는 모든 경우의 에너지들 중 최솟값 출력</span></code></pre></div>","tableOfContents":"<ul>\n<li><a href=\"/Algorithm/%5B%EB%B0%B1%EC%A4%80%5D21317%EC%A7%95%EA%B2%80%EB%8B%A4%EB%A6%AC%EA%B1%B4%EB%84%88%EA%B8%B0/#%EB%AC%B8%EC%A0%9C\">문제</a></li>\n<li><a href=\"/Algorithm/%5B%EB%B0%B1%EC%A4%80%5D21317%EC%A7%95%EA%B2%80%EB%8B%A4%EB%A6%AC%EA%B1%B4%EB%84%88%EA%B8%B0/#%ED%92%80%EC%9D%B4\">풀이</a></li>\n</ul>","frontmatter":{"title":"[백준] 21317 - 징검다리 건너기 (파이썬)","date":"November 03, 2021"}}},"pageContext":{"slug":"/Algorithm/[백준]21317징검다리건너기/","previous":{"fields":{"slug":"/Algorithm/[백준]14501/"},"frontmatter":{"title":"[백준] 14501 - 퇴사 (파이썬)"}},"next":{"fields":{"slug":"/Algorithm/[백준]1932정수삼각형/"},"frontmatter":{"title":"[백준] 1932 - 정수삼각형 (파이썬)"}}}}}