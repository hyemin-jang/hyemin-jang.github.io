{"componentChunkName":"component---src-templates-blog-post-js","path":"/Algorithm/[프로그래머스]소수찾기/","result":{"data":{"site":{"siteMetadata":{"title":"Hyem.log","author":"[hyem]","siteUrl":"https://hyemin-jang.github.io","comment":{"disqusShortName":"","utterances":"hyemin-jang/hyemin-jang.github.io"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"93f2e21e-8356-5cfa-aba7-c376b59cc96e","excerpt":"문제 문제 설명 한자리 숫자가 적힌 종이 조각이 흩어져있습니다. 흩어진 종이 조각을 붙여 소수를 몇 개 만들 수 있는지 알아내려 합니다. 각 종이 조각에 적힌 숫자가 적힌 문자열 numbers가 주어졌을 때, 종이 조각으로 만들 수 있는 소수가 몇 개인지 return 하도록 solution 함수를 완성해주세요. 제한사항 numbers는 길이 1 이상 7 이하인 문자열입니다.\nnumbers는 0~9까지 숫자만으로 이루어져 있습니다.\n“013”은 0, 1,…","html":"<h2 id=\"문제\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C\" aria-label=\"문제 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제</h2>\n<p><strong>문제 설명</strong></p>\n<p>한자리 숫자가 적힌 종이 조각이 흩어져있습니다. 흩어진 종이 조각을 붙여 소수를 몇 개 만들 수 있는지 알아내려 합니다.</p>\n<p>각 종이 조각에 적힌 숫자가 적힌 문자열 numbers가 주어졌을 때, 종이 조각으로 만들 수 있는 소수가 몇 개인지 return 하도록 solution 함수를 완성해주세요.</p>\n<p><strong>제한사항</strong></p>\n<p>numbers는 길이 1 이상 7 이하인 문자열입니다.\nnumbers는 0~9까지 숫자만으로 이루어져 있습니다.\n“013”은 0, 1, 3 숫자가 적힌 종이 조각이 흩어져있다는 의미입니다.</p>\n<p><strong>입출력 예</strong></p>\n<table>\n<thead>\n<tr>\n<th>numbers</th>\n<th>return</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>“17”</td>\n<td>3</td>\n</tr>\n<tr>\n<td>“011”</td>\n<td>2</td>\n</tr>\n</tbody>\n</table>\n<p><strong>입출력 예 설명</strong></p>\n<p>예제 #1<br>\n[1, 7]으로는 소수 [7, 17, 71]를 만들 수 있습니다.</p>\n<p>예제 #2<br>\n[0, 1, 1]으로는 소수 [11, 101]를 만들 수 있습니다.<br>\n11과 011은 같은 숫자로 취급합니다.</p>\n<br>\n<h2 id=\"풀이-과정\" style=\"position:relative;\"><a href=\"#%ED%92%80%EC%9D%B4-%EA%B3%BC%EC%A0%95\" aria-label=\"풀이 과정 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>풀이 과정</h2>\n<p>소수인지 찾는건 둘째치고… 일단 주어진 숫자로 몇 가지의 서로다른 숫자를 만들어낼 수 있는지부터 구해야한다.\n이를 위해 <code class=\"language-text\">순열</code>을 구하면 되는데… 이게 정말 힘들었다ㅠ  일단 파이썬에 쉽게 순열/조합을 구할 수 있는 모듈이 있어서 사용해보았다.</p>\n<br>\n<h3 id=\"1-itertools-모듈로-순열-구하기\" style=\"position:relative;\"><a href=\"#1-itertools-%EB%AA%A8%EB%93%88%EB%A1%9C-%EC%88%9C%EC%97%B4-%EA%B5%AC%ED%95%98%EA%B8%B0\" aria-label=\"1 itertools 모듈로 순열 구하기 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(1) itertools 모듈로 순열 구하기</h3>\n<blockquote>\n<p>💡 <strong>파이썬 itertools</strong> 모듈</p>\n<ul>\n<li>product(p,q, …, [repeat=n]) : 데카르트 곱</li>\n<li>permutations(p, r) : p 중에서 r개를 뽑는 순열</li>\n<li>combinations(p, r) : p중에서 r개를 뽑는 조합</li>\n<li>combinations<em>with</em>replacement(p, r) : p중에서 r개를 뽑는 중복조합<br>\n<a href=\"https://docs.python.org/ko/3.9/library/itertools.html\">파이썬 API 문서 참고</a></li>\n</ul>\n</blockquote>\n<p>주의할 점은, 이 함수들은 <code class=\"language-text\">generator</code>이다. 즉 <strong>루프를 돌며 한번 값을 던져주고 나면 그 값이 기억되지 않는다</strong>. 그렇기 때문에 이런 함수들을 쓰고 나서는 list() 등을 통해 iterator 객체에 값을 담아놔야 한다.</p>\n<p>이 문제에서는 numbers에 같은 숫자가 들어있는 경우 중복 결과값이 나올 수도 있으니 <code class=\"language-text\">set</code>에 넣어서 중복을 제거해주면 되겠다.\n<del>(itertools 모듈과 generator 개념에 대해서는 나중에 다시 자세하게 포스팅해야겠다)</del></p>\n<p>만들 수 있는 모든 숫자들을 구했으면, 이제 이것들이 소수인지 아닌지 판별한다.\n💎 n이 소수인지 판별할때는 <strong>1과 자신 외에 약수가 있는지</strong> 확인해보면 되는데, 약수를 구할때는 <strong>n의 제곱근까지</strong>만 확인해보면 된다!!</p>\n<br>\n<h3 id=\"완성-코드\" style=\"position:relative;\"><a href=\"#%EC%99%84%EC%84%B1-%EC%BD%94%EB%93%9C\" aria-label=\"완성 코드 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>완성 코드</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> itertools <span class=\"token keyword\">import</span> permutations\n<span class=\"token keyword\">import</span> math\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \n    result <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> r <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> p <span class=\"token keyword\">in</span> permutations<span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            result<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># permutations는 generator 이기 때문에 루프 한번 돌고 결과값 사라짐</span>\n            <span class=\"token comment\"># set에 담기</span>\n                            \n    answer <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> result<span class=\"token punctuation\">:</span>\n        check <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">if</span> num <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n            check <span class=\"token operator\">=</span> <span class=\"token number\">1</span>  <span class=\"token comment\"># 1이면 소수 아님</span>\n        <span class=\"token keyword\">elif</span> num <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">pass</span>   <span class=\"token comment\"># 2이면 소수임</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>     \n            <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>            \n                <span class=\"token keyword\">if</span> num <span class=\"token operator\">%</span> i <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>                \n                    check <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n                    <span class=\"token keyword\">break</span>        \n        <span class=\"token keyword\">if</span> check <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>            \n            answer <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n    <span class=\"token keyword\">return</span> answer</code></pre></div>\n<br>\n<h3 id=\"2-재귀함수로-순열-구하기\" style=\"position:relative;\"><a href=\"#2-%EC%9E%AC%EA%B7%80%ED%95%A8%EC%88%98%EB%A1%9C-%EC%88%9C%EC%97%B4-%EA%B5%AC%ED%95%98%EA%B8%B0\" aria-label=\"2 재귀함수로 순열 구하기 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(2) 재귀함수로 순열 구하기</h3>\n<p>모듈을 사용하지 않고 순열을 구하기 위해 재귀함수를 사용하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">permutation</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    used <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 숫자 만들때 해당 숫자를 뽑았는지 안뽑았는지 표시하는 용도의 리스트(중복 선택 막기위해)</span>\n    result <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># numbers에 중복된 숫자 있는 경우 - set으로 정답 중복 제거</span>\n    \n    <span class=\"token keyword\">for</span> r <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n        <span class=\"token comment\"># numbers 중 r개의 숫자 뽑은 모든 결과 구하는 함수</span>\n        <span class=\"token keyword\">def</span> <span class=\"token function\">generate</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> used<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># 재귀함수 종료조건: 만든 숫자의 길이가 r이 되면 종료</span>\n            <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> r<span class=\"token punctuation\">:</span>\n                result<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># int 변환 - 맨 앞자리 0 제거</span>\n                <span class=\"token keyword\">return</span>            \n            <span class=\"token comment\"># 재귀함수 본문</span>\n            <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> used<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span> \n                    value <span class=\"token operator\">+=</span> numbers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token comment\"># 숫자를 뽑아서 길이가 r이 될때까지 더해나간다</span>\n                    used<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token comment\"># 숫자 뽑을때 중복방지</span>\n                    generate<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> used<span class=\"token punctuation\">)</span> \n                    \n                    <span class=\"token comment\"># 재귀함수 종료후, 직전 상태로 되돌아가서 for문 마저 실행</span>\n                    value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n                    used<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n        <span class=\"token comment\"># 모든 r에 대해 generate 함수 수행</span>\n        generate<span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> used<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> result</code></pre></div>\n<br>\n<h3 id=\"완성-코드-1\" style=\"position:relative;\"><a href=\"#%EC%99%84%EC%84%B1-%EC%BD%94%EB%93%9C-1\" aria-label=\"완성 코드 1 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>완성 코드</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> math\n\n<span class=\"token comment\"># 최종 함수</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    result <span class=\"token operator\">=</span> permutation<span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> prime_number<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 순열 구하는 함수</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">permutation</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    used <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span> \n    result <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n\n    <span class=\"token keyword\">for</span> r <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">def</span> <span class=\"token function\">generate</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> used<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> r<span class=\"token punctuation\">:</span>\n                result<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n                <span class=\"token keyword\">return</span>            \n            \n            <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> used<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span> \n                    value <span class=\"token operator\">+=</span> numbers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> \n                    used<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> \n                    generate<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> used<span class=\"token punctuation\">)</span>\n                    value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n                    used<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        \n        generate<span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> used<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">return</span> result\n\n\n<span class=\"token comment\"># 소수 몇개인지 반환하는 함수</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">prime_number</span><span class=\"token punctuation\">(</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    answer <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> numbers<span class=\"token punctuation\">:</span>\n        check <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">if</span> num <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n            check <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">elif</span> num <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">pass</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>     \n            <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>            \n                <span class=\"token keyword\">if</span> num <span class=\"token operator\">%</span> i <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>                \n                    check <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n                    <span class=\"token keyword\">break</span>        \n        <span class=\"token keyword\">if</span> check <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>            \n            answer <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>   \n    <span class=\"token keyword\">return</span> answer</code></pre></div>","tableOfContents":"<ul>\n<li><a href=\"/Algorithm/%5B%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4%5D%EC%86%8C%EC%88%98%EC%B0%BE%EA%B8%B0/#%EB%AC%B8%EC%A0%9C\">문제</a></li>\n<li>\n<p><a href=\"/Algorithm/%5B%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4%5D%EC%86%8C%EC%88%98%EC%B0%BE%EA%B8%B0/#%ED%92%80%EC%9D%B4-%EA%B3%BC%EC%A0%95\">풀이 과정</a></p>\n<ul>\n<li><a href=\"/Algorithm/%5B%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4%5D%EC%86%8C%EC%88%98%EC%B0%BE%EA%B8%B0/#1-itertools-%EB%AA%A8%EB%93%88%EB%A1%9C-%EC%88%9C%EC%97%B4-%EA%B5%AC%ED%95%98%EA%B8%B0\">(1) itertools 모듈로 순열 구하기</a></li>\n<li><a href=\"/Algorithm/%5B%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4%5D%EC%86%8C%EC%88%98%EC%B0%BE%EA%B8%B0/#%EC%99%84%EC%84%B1-%EC%BD%94%EB%93%9C\">완성 코드</a></li>\n<li><a href=\"/Algorithm/%5B%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4%5D%EC%86%8C%EC%88%98%EC%B0%BE%EA%B8%B0/#2-%EC%9E%AC%EA%B7%80%ED%95%A8%EC%88%98%EB%A1%9C-%EC%88%9C%EC%97%B4-%EA%B5%AC%ED%95%98%EA%B8%B0\">(2) 재귀함수로 순열 구하기</a></li>\n<li><a href=\"/Algorithm/%5B%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4%5D%EC%86%8C%EC%88%98%EC%B0%BE%EA%B8%B0/#%EC%99%84%EC%84%B1-%EC%BD%94%EB%93%9C-1\">완성 코드</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"[프로그래머스] 소수찾기 (파이썬)","date":"August 02, 2021"}}},"pageContext":{"slug":"/Algorithm/[프로그래머스]소수찾기/","previous":{"fields":{"slug":"/Algorithm/[프로그래머스]모의고사/"},"frontmatter":{"title":"[프로그래머스] 모의고사 (파이썬)"}},"next":{"fields":{"slug":"/Algorithm/DFS,BFS/"},"frontmatter":{"title":"[Algorithm] DFS/BFS"}}}}}